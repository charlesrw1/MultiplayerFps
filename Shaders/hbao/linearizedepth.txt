/*
 * Copyright (c) 2014-2021, NVIDIA CORPORATION.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-FileCopyrightText: Copyright (c) 2014-2021 NVIDIA CORPORATION
 * SPDX-License-Identifier: Apache-2.0
 */
 

layout(location=0) uniform vec4 clipInfo; // z_n * z_f,  z_n - z_f,  z_f, perspective = 1 : 0

layout(binding=0)  uniform sampler2D inputTexture;

layout(location=0,index=0) out float out_Color;


uniform float zNear =0.01;

float reconstructCSZ(float d, vec4 clipInfo) {
   //return (clipInfo[0] / (clipInfo[1] * d + clipInfo[2]));
   // 7/30: depth buffer change
   return zNear / d;
}
void main() {
  float depth = texelFetch(inputTexture, ivec2(gl_FragCoord.xy), 0).x;
  out_Color = reconstructCSZ(depth, clipInfo);
}
