#extension GL_NV_shader_atomic_int64 : enable
#extension GL_ARB_gpu_shader_int64 : enable
layout(local_size_x = 64, local_size_y=1,local_size_z=1) in;

#include "SharedGpuTypes.txt"
#include "Meshlets/meshlet_shared.txt"
#include "Meshlets/prefix.txt"


uniform int num_instances = 0;

// first pass: expand chunks for instances

// second pass: append to out_indicies

uniform int meshlets_in_mesh = 0;
uniform int mesh_basevertex = 0;

#ifdef INSTANCE_CULLING
void main()
{
	uint id = gl_GlobalInvocationID.x;

	if(id >= num_instances)
		return;
	
	Instance instance = instances[id];
	
	prefix_sum_inclusive_append(id, meshlets_in_mesh);
}
#endif // INSTANCE_CULLING

#ifdef MESHLET_CULLING

void main()
{
	uint id = gl_GlobalInvocationID.x;
	
	if(id >= uint(buf.counter))
		return;
		
	PrefixSumValue val = prefix_sum_binary_search(id);
	uint instance_index = val.index_;
	uint meshlet_index = val.sum - id - 1;
	
	Chunk meshlet = chunks[meshlet_index];
	//
	uint draw_call_index = atomicAdd(num_indirect_calls.x, 1);
	//
	DrawElementsIndirectCommand cmd;
	cmd.count = meshlet.index_count;
	cmd.primCount = 1;
	cmd.firstIndex = meshlet.index_offset;
	cmd.baseVertex = mesh_basevertex;
	cmd.baseInstance = 0;
	//
	indirect_calls[draw_call_index] = cmd;
	index_to_inst[draw_call_index] =  instance_index;
}

#endif // MESHLET_CULLING