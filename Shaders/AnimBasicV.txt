
layout (location = 0) in vec3 VS_IN_Postion;
layout (location = 1) in vec2 VS_IN_TexCoord;
layout (location = 2) in vec3 VS_IN_Normal;
#ifdef ANIMATED
layout (location = 3) in ivec4 VS_IN_BoneIndicies;
layout (location = 4) in vec4 VS_IN_BoneWeights;
#endif
#ifdef VERTEX_COLOR
layout (location = 5) in vec4 VS_IN_Color;
#endif
#ifdef LIGHTMAPPED
layout (location = 6) in vec2 VS_IN_TexCoord2;
#endif
#ifdef NORMALMAPPED
layout (location = 7) in vec3 VS_IN_Tangent;
#endif


out vec3 FS_IN_FragPos;
out vec3 FS_IN_Normal;
out vec2 FS_IN_Texcoord;
out vec3 FS_IN_BoneColor;
out vec4 FS_IN_NDC;
#ifdef VERTEX_COLOR
out vec4 FS_IN_Color;
#endif
#ifdef LIGHTMAPPED
out vec2 FS_IN_TexCoord2;
#endif
#ifdef NORMALMAPPED
out mat3 FS_IN_TBN;
#endif

vec3 randColor(int number){
    return fract(sin(vec3(number+1)*vec3(12.8787, 1.97, 20.73739)));
}


#include "SharedGpuTypes.txt"

layout (binding = 0, std140) uniform Ubo_View_Constant_Buffer {
	Ubo_View_Constants_Struct g;
};

struct Gpu_Object_Data
{
	mat4 model;
	mat4 invmodel;
	vec4 colorval;
	int anim_mat_offset;
	float obj1;
	float obj2;
	float obj3;
};

layout (binding = 2, std140) readonly buffer Object_Data_Buffer {
	Gpu_Object_Data g_objects[];
};
layout (binding = 3, std140) readonly buffer Object_Skin_Matricies {
	mat4 g_skin_matricies[];
};

uniform int obj_index = 0;


#ifdef WIND
uniform float height;
uniform float startheight;
uniform vec3 wind_dir;
uniform float speed;

vec3 do_wind_sway(vec3 pos, mat4 Model)
{
	vec3 wind_dir_local = wind_dir;
	float height_scale = smoothstep(height*startheight, pos.y, height);
	height_scale = pow(height_scale, 1.2);

	float sway_time = (g.viewpos_time.w + dot(vec4(1),Model[3]) + pos.y)*speed;
	vec4 sines = sin(vec4(1.5,1.2,0.7,0.635)*sway_time);
	sines.xy = mix(sines.xy, sines.zw, 0.5);
	vec3 pos_offset = wind_dir_local*height_scale*mix(sines.x,sines.y, 0.4)*pow(length(pos.xz),1.5);
	
	return pos +  pos_offset*0.05;
}

#endif




void main()
{
	//vec3 VS_IN_Normal = vec3(0);
	//ivec4 VS_IN_BoneIndicies = ivec4(0);
	//vec4 VS_IN_BoneWeights = vec4(1,0,0,0);
	//vec2 VS_IN_TexCoord = vec2(0);
	//vec4 VS_IN_Color = vec4(0);
	//vec2 VS_IN_TexCoord2 = vec2(0);
	//vec3 VS_IN_Tangent = vec3(1,0,0);

	mat4 Model = g_objects[obj_index].model;
	mat4 InverseModel = g_objects[obj_index].invmodel;

#ifdef ANIMATED
	vec3 local_pos = vec3(0.0);
	vec3 local_normal = vec3(0.0);
#ifdef NORMALMAPPED
	vec3 local_tangent = vec3(0.0);
#endif
	int obj_skin_offset = g_objects[obj_index].anim_mat_offset;

	for(int i=0;i<4;i++) {
		if(VS_IN_BoneIndicies[i]==-1)
			continue;
		vec3 posadded = vec3(g_skin_matricies[obj_skin_offset + VS_IN_BoneIndicies[i]]*vec4(VS_IN_Postion,1.0));
		local_pos += posadded * VS_IN_BoneWeights[i];
		
		vec3 normaladded = mat3(g_skin_matricies[obj_skin_offset + VS_IN_BoneIndicies[i]])*VS_IN_Normal;
		local_normal += normaladded * VS_IN_BoneWeights[i];
		
	#ifdef NORMALMAPPED
		vec3 tangentadded = mat3(g_skin_matricies[obj_skin_offset + VS_IN_BoneIndicies[i]])*VS_IN_Tangent;
		local_tangent += tangentadded;
	#endif
	}
#else
	vec3 local_pos = VS_IN_Postion;
	vec3 local_normal = VS_IN_Normal;

#ifdef NORMALMAPPED
	vec3 local_tangent = VS_IN_Tangent;
#endif

#endif

#ifdef WIND
	local_pos = do_wind_sway(local_pos, Model);
#endif


//	vec3 local_pos = vec3(BoneTransform[VS_IN_Bone]*vec4(VS_IN_Postion,1.0));
	FS_IN_FragPos = vec3(Model * vec4(local_pos,1.0));
#ifdef ANIMATED
	FS_IN_BoneColor = randColor(VS_IN_BoneIndicies.x)*VS_IN_BoneWeights.x+
		randColor(VS_IN_BoneIndicies.y)*VS_IN_BoneWeights.y+
		randColor(VS_IN_BoneIndicies.z)*VS_IN_BoneWeights.z+
		randColor(VS_IN_BoneIndicies.w)*VS_IN_BoneWeights.w;
#endif
    FS_IN_Normal = mat3(transpose(InverseModel))*normalize(local_normal);
	
#ifdef NORMALMAPPED
	vec3 world_tangent = mat3(transpose(InverseModel))*normalize(local_tangent);
	vec3 world_bitangent = cross(FS_IN_Normal, world_tangent);
	FS_IN_TBN = mat3(world_tangent, world_bitangent, FS_IN_Normal);
#endif
    
	
#ifdef VERTEX_COLOR
	FS_IN_Color = VS_IN_Color;
#endif

#ifdef LIGHTMAPPED
	FS_IN_TexCoord2 = VS_IN_TexCoord2;
#endif
	
    FS_IN_NDC = g.viewproj * vec4(FS_IN_FragPos, 1.0);
	gl_Position = FS_IN_NDC;
	FS_IN_Texcoord = VS_IN_TexCoord;
	
	// seems to add 0.04ms when not used still
	gl_ClipDistance[0] = dot(vec4(FS_IN_FragPos,1.0), g.custom_clip_plane);
}