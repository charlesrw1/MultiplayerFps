#ifndef SHAREDGPU_
#define SHAREDGPU_

#ifdef __cplusplus
using namespace glm;
typedef uint32_t uint;
namespace gpu {
#endif

struct Object_Instance
{
	mat4 model;
	mat4 prev_model;
	vec4 colorval;
	uint anim_mat_offset;	// offset into anim matricies
	uint flags;	// INSTANCE_x
	uint colorval2;
	float obj3;
};

// flags for 'bitmask_flags'
const uint MATFLAG_BILLBOARD_ROTATE_AXIS  = 1;

struct Material_Data
{
	vec4 diffuse_tint;
	float rough_mult;
	float metal_mult;
	float padding;
	uint bitmask_flags;
};

const uint DEBUG_NONE = 0;
const uint DEBUG_NORMAL = 1;
const uint DEBUG_MATID = 2;
const uint DEBUG_AO = 3;
const uint DEBUG_WIREFRAME = 4;
const uint DEBUG_ALBEDO = 5;
const uint DEBUG_DIFFUSE = 6;
const uint DEBUG_SPECULAR = 7;
const uint DEBUG_OBJID = 8;
const uint DEBUG_LIGHTING_ONLY = 9;

const uint INSTANCE_NON_UNIFORM_SCALE = 1;



struct Ubo_View_Constants_Struct
{
	mat4 view;
	mat4 viewproj;
	mat4 invview;
	mat4 invproj;
	mat4 inv_viewproj;
	vec4 viewpos_time;
	vec4 viewfront;
	vec4 viewport_size;
	mat4 prev_viewproj;

	float near;
	float far;
	float shadowmap_epsilon;
	float inv_scale_by_proj_distance;
	
	vec4 fogcolor;
	vec4 fogparams;
	vec4 directional_light_dir_and_used;
	vec4 directional_light_color;
	
	float numcubemaps;
	float numlights;
	float forcecubemap;
	uint debug_options;
	
	// bit 0: wireframe first pass or second pass
	uint flags;	
	uint padding1;
	uint padding2;
	uint padding3;
	
	vec4 current_and_prev_jitter;
};

struct DispatchIndirectCommand 
{
	uint  num_groups_x;
	uint  num_groups_y;
	uint  num_groups_z;
};

struct DrawElementsIndirectCommand 
{
	uint count;
	uint primCount;
	uint firstIndex;
	int  baseVertex;
	uint baseInstance;
};

struct Chunk 
{
    vec4 cone_apex;
    vec4 cone_axis_cutoff;
    vec4 bounding_sphere;
    uint index_offset;
    uint index_count;
	uint padding1;
	uint padding2;
};

struct Cull_Paramaters
{
	mat4 view;
	mat4 proj;
	vec4 viewpos;
	vec4 frustum;
	
	float near;
	float far;
	int cull_instances;
	int cull_cone;
	
	int cull_frustum;
	int num_instances;
	int padding1;
	int padding2;
};


#define AO_RANDOMTEX_SIZE 4
// from nvidias gl_ssao
struct HBAOData {
  float   RadiusToScreen;	// radius
  float   R2;     			// 1/radius
  float   NegInvR2;     	// radius * radius
  float   NDotVBias;
 
  vec2    InvFullResolution;
  vec2    InvQuarterResolution;
  
  float   AOMultiplier;
  float   PowExponent;
  vec2    _pad0;
  
  vec4    projInfo;
  vec2    projScale;
  int     projOrtho;
  int     _pad1;
  
  vec4    float2Offsets[AO_RANDOMTEX_SIZE*AO_RANDOMTEX_SIZE];
  vec4    jitters[AO_RANDOMTEX_SIZE*AO_RANDOMTEX_SIZE];
};

struct Post_Process_Settings
{
	float exposure;
	float contrast;
};

#ifdef __cplusplus
};
#endif

#endif
