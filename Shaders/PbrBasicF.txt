#version 430 core

layout (location = 0) out vec4 FS_OUT_Color;

in vec3 FS_IN_FragPos;
in vec3 FS_IN_Normal;
in vec2 FS_IN_Texcoord;
in vec3 FS_IN_BoneColor;
in vec4 FS_IN_NDC;


#ifdef VERTEX_COLOR
in vec4 FS_IN_Color;
#endif

#ifdef LIGHTMAPPED
in vec2 FS_IN_TexCoord2;
uniform sampler2D lightmap;
#endif

#ifdef NORMALMAPPED
in mat3 FS_IN_TBN;
#endif

#ifdef BLEND2
uniform sampler2D basecolor2;
uniform sampler2D normalmap2;
uniform sampler2D auxcolor2;
uniform sampler2D special;
#endif

uniform samplerCubeArray pbr_irradiance_cubemaps;
uniform samplerCubeArray pbr_specular_cubemaps;
uniform sampler2D PBR_brdflut;

//#define CHEAP_PCF
#ifdef CHEAP_PCF
uniform sampler2DArray cascade_shadow_map;
#else
uniform sampler2DArrayShadow cascade_shadow_map;
#endif

uniform sampler2D ssao_tex;

uniform sampler2D basecolor;
uniform sampler2D normal_tex;
uniform sampler2D roughness_tex;
uniform sampler2D metalness_tex;
uniform sampler2D ao_tex;
uniform vec4 color_tint = vec4(1);
uniform float metal_mult = 1.0;
uniform float rough_mult = 1.0;
uniform vec2 rough_tex_remap = vec2(0,1);


uniform sampler3D volumetric_fog;


uniform sampler2D caustictex;



struct Cubemap_Box
{
	vec4 boxmin;
	vec4 boxmax;
	vec4 probepos_priority;
};

layout (binding = 9, std140) readonly buffer Cubemap_Box_Buffer
{
	Cubemap_Box cubemaps[];
};

struct World_Light
{
	vec4 pos_type;		
	vec4 normal_shadowindex;
	vec4 color_maxdist;
	vec4 conemin_conemax_lightcookie;
};

layout (binding = 10, std140) readonly buffer World_Light_Buffer
{
	World_Light lights[];
};

struct Ubo_View_Constants_Struct
{
	mat4 view;
	mat4 viewproj;
	mat4 invview;
	mat4 invproj;
	vec4 viewpos_time;
	vec4 viewfront;
	vec4 viewport_size;

	float near;
	float far;
	float shadowmap_epsilon;
	float padding1;
	
	vec4 fogcolor;
	vec4 fogparams;
	vec4 directional_light_dir_and_used;
	vec4 directional_light_color;
	
	float numcubemaps;
	float numlights;
	float forcecubemap;
	float padding2;
	
	vec4 custom_clip_plane;
};

layout (binding = 0, std140) uniform Ubo_View_Constant_Buffer {
	Ubo_View_Constants_Struct g;
};

layout (std140, binding = 8) uniform LightSpaceMatrices
{
    mat4 Mat[4];
	vec4 NearPlanes;
	vec4 FarPlanes;
}CascadeMats;


float sample_sun_shadow(vec3 WorldSpace)
{
	int layer = 3;
	
	
	for(int i=0;i<4;i++) {
	// This adds some instructions but it looks so much better than just checking the plane distance since cascades overlap
		vec4 frag_pos_light_space = CascadeMats.Mat[i]*vec4(WorldSpace,1.0);
		vec3 proj_coords=frag_pos_light_space.xyz/frag_pos_light_space.w;
		if(proj_coords.x>-0.99&&proj_coords.x<0.99&&proj_coords.y>-0.99&&proj_coords.y<0.99 && proj_coords.z >-0.99 && proj_coords.z < 0.99) {
			layer=i;
			break;
		}
	}
	
	
	vec4 frag_pos_light_space = CascadeMats.Mat[layer]*vec4(WorldSpace,1.0);
	vec3 proj_coords=frag_pos_light_space.xyz/frag_pos_light_space.w;
	proj_coords=proj_coords*0.5+0.5;
	float depth_light_space=proj_coords.z;
	if(depth_light_space>1.05)
		return 1.0;
	
	float bias = g.shadowmap_epsilon;
	
	float shadow = 0.0;
	vec2 texelSize = 1.0 / vec2(textureSize(cascade_shadow_map, 0));
	vec2 grad = fract(proj_coords.xy/texelSize);
	for(int x = -1; x <= 1; ++x)
	{
		for(int y = -1; y <=1; ++y)
		{
			#ifdef CHEAP_PCF
		
				float pcf_depth = texture(
							cascade_shadow_map,
							vec3(proj_coords.xy + vec2(x, y) * texelSize,
							layer)
							).r; 
				shadow += (depth_light_space - bias) > pcf_depth ? 1.0 : 0.0;
			#else	// Bilinear filtered, looks nice
					shadow += texture(cascade_shadow_map,vec4(proj_coords.xy + vec2(x, y) * texelSize,
							layer,(depth_light_space-bias)));
			#endif
		}    
	}
	shadow /= 9.0;

	return 1.0-shadow;
}

struct Vfog_Params
{
	ivec4 volumesize;
	vec4 spread_frustumend;
};
layout (binding = 4, std140) uniform Vfog_Param_Buffer {
	Vfog_Params fogparam;
};

float linearize_depth(float d,float zNear,float zFar)
{
    float z_n = 2.0 * d - 1.0;
    return 2.0 * zNear * zFar / (zFar + zNear - z_n * (zFar - zNear));
}
#define NEWWAY
vec3 ApplyVolumetricFog(vec3 incolor, vec3 NDC)
{
	float near = g.near;
	float far = g.far;

	float lineardepth = linearize_depth(NDC.z*0.5+0.5,near,far);
	vec2 xy = (NDC.xy+vec2(1.0))*0.5;
	vec3 texturecoord = vec3(xy,0.0);
	
#ifdef NEWWAY
	texturecoord.z = pow((lineardepth-near) / fogparam.spread_frustumend.y,1.0/fogparam.spread_frustumend.x);
#endif
	
	
	vec4 scatteredlight = textureLod(volumetric_fog,texturecoord,0.0);
	vec3 inscattering = scatteredlight.rgb;
	float transmittance = scatteredlight.a;//exp(-scatteredlight.a);
	return incolor*transmittance + inscattering;
}


// learnopengl code >:)
#define PI 3.1415927
// ----------------------------------------------------------------------------
float DistributionGGX(vec3 N, vec3 H, float roughness)
{
    float a = roughness*roughness;
    float a2 = a*a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;

    float nom   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return nom / max(denom,0.000001);
}
// ----------------------------------------------------------------------------
float GeometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;

    float nom   = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return nom / denom;
}
// ----------------------------------------------------------------------------
float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2 = GeometrySchlickGGX(NdotV, roughness);
    float ggx1 = GeometrySchlickGGX(NdotL, roughness);

    return ggx1 * ggx2;
}
// ----------------------------------------------------------------------------
vec3 fresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}


vec3 FresnelSchlickRougness(float cosTheta, vec3 F0, float roughness)
{
	 return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}

vec3 decode_normal(vec2 e)
{
	vec3 n=vec3(e,1.0-abs(e.x)-abs(e.y));
	if(n.z<0.0)
		n.xy=(1.0-abs(n.yx))*(step(0.0,n.xy)*2.0-vec2(1.0));
    n = normalize( n );
    return n;
}

vec3 parallax_sample(float cindex, float roughness, vec3 R)
{
	uint num = uint(cindex);
	
	// intersect ray with box
	vec3 pos = FS_IN_FragPos;
	
	vec3 inv_dir = 1.f / R;
	vec3 tmin = (cubemaps[num].boxmin.xyz -  pos) * inv_dir;
	vec3 tmax = (cubemaps[num].boxmax.xyz - pos) * inv_dir;
	vec3 t1_ = min(tmin, tmax);
	vec3 t2_ = max(tmin, tmax);
	float tnear = max(max(t1_.x, t1_.y), t1_.z);
	float tfar = min(min(t2_.x, t2_.y), t2_.z);
	
	if(tfar>tnear)
		tnear = tfar;
	
	vec3 point = pos + R*tnear;
	vec3 sampledir = normalize(point-cubemaps[num].probepos_priority.xyz);
	
	//return textureLod(pbr_specular_cubemaps,vec4(sampledir,cindex), roughness*4.0).rgb;
	return textureLod(pbr_specular_cubemaps,vec4(R,cindex), roughness*4.0).rgb;
}

float get_cubemap_index(vec3 worldpos)
{
	if(g.forcecubemap != -1.0)
		return g.forcecubemap;

	bool found = false;
	uint bestindex = 0;
	float bestpriority = -5.0;
	float bestdist = 100.0;
	uint num = uint(g.numcubemaps);
	for(uint i = 1; i < num;i++) {
		vec3 x1 = worldpos - cubemaps[i].boxmin.xyz;
		vec3 x2 = cubemaps[i].boxmax.xyz - worldpos;
		if(all(greaterThan(x1,vec3(0.0))) && all(greaterThan(x2,vec3(0.0))) && cubemaps[i].probepos_priority.w >= bestpriority) {
			bestindex = i;
			found = true;
			bestpriority = cubemaps[i].probepos_priority.w;
		}
		else if(!found) {
			x1 = abs(x1);
			x2 = abs(x2);
			float dist = min(x1.x,x2.x);
			dist = max(dist, min(x1.y,x2.y));
			dist = max(dist, min(x1.z,x2.z));
			if(dist < bestdist) {
				bestdist = dist;
				bestindex = i;
			}
		}
	}
	return float(bestindex);
}

float get_ao()
{
	return texture(ssao_tex, FS_IN_NDC.xy/FS_IN_NDC.w * 0.5 + 0.5).r;
}

float fresnel_term(vec3 N, vec3 V, float power)
{
	return pow(1.0-clamp(dot(N,V),0.0, 1.0),power);
}


vec4 pbr_calculate(vec3 diffuse, float roughness, float metalness, vec3 N, float opacity, vec3 emissive, float ambient_occlusion)
{
	vec3 view_pos = g.viewpos_time.xyz;
	vec3 view_front = g.viewfront.xyz;


	vec3 V = normalize(view_pos-FS_IN_FragPos);


	vec3 R = reflect(-V,N);
	float Roughness = roughness;
	
	vec3 Albedo = diffuse;
	float Metalness = metalness;
	vec3 F0 = vec3(0.04);
	F0 = mix(F0,Albedo,Metalness);
	//F0 = vec3(0.95, 0.64, 0.54);
// punctual lights
	vec3 Lo = vec3(0.0);
	vec3 L = -g.directional_light_dir_and_used.xyz;
    vec3 H = normalize(V + L);
    vec3 radiance = g.directional_light_color.rgb*0.002;
//#ifndef LIGHTMAPPED
	{
		vec3 surface_N = N;
        // Cook-Torrance BRDF
		
        float NDF = DistributionGGX(surface_N, H, Roughness);   
        float G   = GeometrySmith(surface_N, V, L, Roughness);    
        vec3 F    = fresnelSchlick(max(dot(H, V), 0.0), F0);        
        
        vec3 numerator    = NDF * G * F;
        float denominator = 4.0 * max(dot(surface_N, V), 0.0) * max(dot(surface_N, L), 0.0) + 0.0001; // + 0.0001 to prevent divide by zero
        vec3 specular = numerator / 1.0;
        
		float shadow = 1.0;
		
         // kS is equal to Fresnel
        vec3 kS = F;
        // for energy conservation, the diffuse and specular light can't
        // be above 1.0 (unless the surface emits light); to preserve this
        // relationship the diffuse component (kD) should equal 1.0 - kS.
        vec3 kD = vec3(1.0) - kS;
        // multiply kD by the inverse metalness such that only non-metals 
        // have diffuse lighting, or a linear blend if partly metal (pure metals
        // have no diffuse light).
        kD *= 1.0 - Metalness;	                
            
        // scale light by NdotL
		#ifdef WIND
		{
			float NdotL = abs(dot(surface_N, L));
			float strength = 0.5;
			if(dot(surface_N, L) < 0)
				specular = vec3(0.0);
			
			Lo += (kD * Albedo * strength / PI + specular) * radiance * NdotL * shadow;
		}
		#else
		{
			float NdotL = max(dot(surface_N, L), 0.0);        

			// add to outgoing radiance Lo
			Lo += (kD * Albedo / PI + specular) * radiance * NdotL * shadow;
		}
		#endif
	}
//#endif


// Lighting
	float cm_index = get_cubemap_index(FS_IN_FragPos);
	cm_index = 0.f;
	const float MAX_REFLECTION_LOD = 4.0;
	//vec3 prefiltered_color = textureLod(pbr_specular_cubemaps,vec4(R,cm_index), Roughness*MAX_REFLECTION_LOD).rgb;
	vec3 prefiltered_color = parallax_sample(cm_index, Roughness, R);

	vec3 F = FresnelSchlickRougness(max(dot(N,V),0.0),F0,Roughness);
	vec2 env_brdf = texture(PBR_brdflut,vec2(max(dot(N,V),0.0),Roughness)).rg;
	vec3 specular = prefiltered_color*(F*env_brdf.x+env_brdf.y);
	float ao = min(get_ao(),ambient_occlusion);
	
	vec3 irradiance = texture(pbr_irradiance_cubemaps,vec4(N, cm_index)).rgb;

#ifdef LIGHTMAPPED
	irradiance = texture(lightmap, FS_IN_TexCoord2).rgb*1.4;
#endif
	vec3 diffuse_light = irradiance*Albedo;
	
	vec3 kS = F;
	vec3 kD = (1.0-kS)*(1.0-Metalness);
	
	vec3 ambient =(kD*diffuse_light+ specular)*ao;
	
#ifdef LIGHTMAPPED
	//float sun = sample_sun_shadow(FS_IN_FragPos)*max(dot(-g.directional_light_dir_and_used.xyz,N),0.0);
	//ambient = mix(ambient*0.2, ambient, sun);
#endif

	ambient += emissive + Lo;

	return vec4(ambient, opacity);//vec4(ambient, opacity);
}

#ifdef BLEND2
float get_blend2_lerp()
{
	float vert_color = FS_IN_Color.r;
	float modulate_tex = 1.0-texture(special, FS_IN_Texcoord).r;
	float val = 0.2;
	vec2 bound = clamp(vec2(modulate_tex-val,modulate_tex+val),vec2(0),vec2(1));
	return smoothstep(bound.x,bound.y, vert_color);
}
#endif


vec4 TriplanarProjection_float(
    sampler2D Texture,
	vec3 Position,
    vec3 Normal,           // world space
    float Tile,
    float Blend,

    // UV manipulation
    float Speed,
    float Rotation
)
{
    vec3 Node_UV = Position * Tile;

    // animate UVs
    float Offset_UV = g.viewpos_time.w * Speed;
	vec2 actual_offset = vec2(cos(Rotation)*Offset_UV, sin(Rotation)*Offset_UV);

    vec3 Node_Blend = pow(abs(Normal), vec3(Blend));
    Node_Blend /= dot(Node_Blend, vec3(1.0));

    vec4 Node_X = texture(Texture,Node_UV.zy+actual_offset); 
    vec4 Node_Y =  texture(Texture,Node_UV.xz+actual_offset); 
    vec4 Node_Z = texture(Texture,Node_UV.xy+actual_offset);

    return Node_X * Node_Blend.x + Node_Y * Node_Blend.y + Node_Z * Node_Blend.z;
}

void main()
{

	vec4 tex = texture(basecolor, vec2(FS_IN_Texcoord.x,FS_IN_Texcoord.y));
	
#ifdef BLEND2
	float blend2_lerp = get_blend2_lerp();
	tex = mix(tex,texture(basecolor2, FS_IN_Texcoord), blend2_lerp);
#endif
	
	
	tex.rgb = pow(tex.rgb,vec3(2.2));
	
	tex *= color_tint;
	
#ifdef ALPHATEST
	if(tex.a < 0.5)
		discard;
#endif
#if 1

	vec3 V = normalize(g.viewpos_time.xyz-FS_IN_FragPos);
	vec3 N = normalize(FS_IN_Normal);
	vec3 R = reflect(-V,N);
	
	
#ifdef NORMALMAPPED
	N = texture(normal_tex, FS_IN_Texcoord).rgb;
	
	#ifdef BLEND2
	N = mix(N, texture(normalmap2, FS_IN_Texcoord).rgb, blend2_lerp);
	#endif
	
	N = N*2 - vec3(1);
	N = normalize(FS_IN_TBN * N); 
#endif

// FIXME WITH NORMALMAPS!
#ifdef WIND
	if(dot(N, V)<0)
		N = -N;
#endif


	float roughness = texture(roughness_tex, FS_IN_Texcoord).r;
	float ambient_occlusion = texture(ao_tex, FS_IN_Texcoord).r;
	float metalness = texture(metalness_tex,FS_IN_Texcoord).r;
	
	#ifdef BLEND2
		roughness = mix(roughness, texture(auxcolor2, FS_IN_Texcoord).r, blend2_lerp);
	#endif
	
	roughness *= rough_mult;
	metalness *= metal_mult;

	vec3 emissive = vec3(0.0);
	
	float water_height = -2;
	if(FS_IN_FragPos.y < water_height) {
		emissive = TriplanarProjection_float(caustictex, FS_IN_FragPos, N, 0.2, 3.0, 0.3, 2.6).rrr*0.9;
		emissive += TriplanarProjection_float(caustictex, FS_IN_FragPos, N, 0.4, 3.0, 0.5, -1.1 ).rrr*0.9;
		emissive = pow(emissive,vec3(1.2)) * smoothstep(water_height,water_height-1,FS_IN_FragPos.y);
		tex.rgb = mix(tex.rgb, vec3(0.1,0.3,0.6),0.8);
		roughness *= 0.3;
	
	}
	
//if(FS_IN_Texcoord.x<0.5)
//outcolor = vec4(0);

	FS_OUT_Color = pbr_calculate(tex.rgb, roughness , metalness, N, 1.0,emissive, ambient_occlusion).rgbb;
	//\\FS_OUT_Color = vec4(1,0,0,0);
	//FS_OUT_Color = eval_phong_brdf(tex.rgb, specular_color, spec_exponent, tex.a, vec3(0.0),N, vec3(0.0));
	//FS_OUT_Color = vec4(N,1.0);
	//FS_OUT_Color = vec4(specular_color,1.0);
	//FS_OUT_Color = tex.rgbb;
	#ifdef BLEND2
	//FS_OUT_Color = tex;
	#endif
#endif
//#endif

}	