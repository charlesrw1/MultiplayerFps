#version 430 core

out vec4 FS_OUT_Color;

in vec3 FS_IN_FragPos;
in vec3 FS_IN_Normal;
in vec2 FS_IN_Texcoord;
in vec3 FS_IN_BoneColor;

uniform vec3 view_pos;
uniform vec3 view_front;

uniform sampler2D basecolor;
uniform sampler2D auxcolor;

uniform float in_roughness;
uniform float in_metalness;


uniform samplerCube PBR_irradiance;
uniform samplerCube PBR_prefiltered_specular;
uniform sampler2D PBR_brdflut;

#ifdef VERTEX_COLOR
in vec4 FS_IN_Color;
#endif

#ifdef LIGHTMAPPED
in vec2 FS_IN_TexCoord2;
uniform sampler2D lightmap;
#endif




vec3 FresnelSchlickRougness(float cosTheta, vec3 F0, float roughness)
{
	 return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}

vec3 decode_normal(vec2 e)
{
	vec3 n=vec3(e,1.0-abs(e.x)-abs(e.y));
	if(n.z<0.0)
		n.xy=(1.0-abs(n.yx))*(step(0.0,n.xy)*2.0-vec2(1.0));
    n = normalize( n );
    return n;
}

void main()
{
	vec4 tex = texture(basecolor, FS_IN_Texcoord);
	tex.rgb = pow(tex.rgb,vec3(2.2));
#ifdef ALPHATEST
	if(tex.a < 0.5)
		discard;
#endif


	vec3 N = normalize(FS_IN_Normal);
	float Roughness = in_roughness;
	vec3 Albedo = tex.rgb;
	float Metalness = in_metalness;
	
// Lighting
	vec3 V = normalize(view_pos-FS_IN_FragPos);
	
	vec3 R = reflect(-V,N);
	const float MAX_REFLECTION_LOD = 4.0;
	vec3 prefiltered_color = textureLod(PBR_prefiltered_specular,R,Roughness*MAX_REFLECTION_LOD).rgb;
	prefiltered_color = pow(prefiltered_color,vec3(2.2));
	
	vec3 F0 = vec3(0.04);
	F0 = mix(F0,Albedo,Metalness);

	vec3 F = FresnelSchlickRougness(max(dot(N,V),0.0),F0,Roughness);
	vec2 env_brdf = texture(PBR_brdflut,vec2(max(dot(N,V),0.0),Roughness)).rg;
	vec3 specular = prefiltered_color*(F*env_brdf.x+env_brdf.y);
	float ao = 1.0;
	vec3 irradiance = texture(PBR_irradiance,N).rgb;
	irradiance = textureLod(PBR_prefiltered_specular,N,4.0).rgb;
	irradiance = pow(irradiance, vec3(2.2));
#ifdef LIGHTMAPPED
	//irradiance = texture(lightmap, FS_IN_TexCoord2).rgb;
#endif
	vec3 diffuse = irradiance*Albedo;


	
	vec3 kS = F;
	vec3 kD = (1.0-kS)*(1.0-Metalness);
	
	vec3 ambient =(kD*diffuse+specular)*ao;
	vec3 out_color = ambient;
	out_color = pow(out_color,vec3(1/2.2));

	FS_OUT_Color = vec4(out_color ,1.0);//vec4(pow(diffuse+ambient,vec3(1/2.2)),1);//abs(Albedo-((N+vec3(1))*0.5)),1.0);	
}	