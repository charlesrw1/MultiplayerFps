// https://github.com/scanberg/hbao/blob/master/resources/shaders/hbao_frag.glsl

// This is a HBAO-Shader for OpenGL, based upon nvidias directX implementation
// supplied in their SampleSDK available from nvidia.com

#version 430

uniform sampler2D noise_texture;
uniform sampler2D scene_depth;
uniform sampler2D scene_normals;

uniform vec2 AORes;
uniform vec2 InvAORes;
uniform vec2 NoiseScale;
uniform vec2 LinMAD;

#define KERNEL_SIZE 64
uniform vec3 samples[KERNEL_SIZE];
uniform mat4 projection;
uniform mat4 invprojection;

in vec2 FS_IN_TexCoord;
out vec3 FS_OUT_frag0;

float ViewSpaceZFromDepth(float d)
{
	// [0,1] -> [-1,1] clip space
	d = d * 2.0 - 1.0;

	// Get view space Z
	return -1.0 / (LinMAD.x * d + LinMAD.y);
}

vec3 UVToViewSpace(vec2 uv, float z)
{
	//uv = UVToViewA * uv + UVToViewB;
	
	vec4 viewspace = invprojection*vec4(uv*2.0-vec2(1.0),z*2.0-1.0,1.0);
	
	return viewspace.xyz/viewspace.w;//vec3(uv * z, z);
}

vec3 GetViewPos(vec2 uv)
{
	//float z = ViewSpaceZFromDepth(texture(scene_depth, uv).r);
	float z = texture(scene_depth, uv).r;
	return vec3(UVToViewSpace(uv, z).xyz);//,z);
}

float Length2(vec3 v)
{
	return dot(v,v);
}

vec3 MinDiff(vec3 P, vec3 Pr, vec3 Pl)
{
    vec3 V1 = Pr - P;
    vec3 V2 = P - Pl;
    return (dot(V1,V1) < dot(V2,V2)) ? V1 : V2;
}

float radius = 0.1;
float bias = 0.001;

void main()
{
	vec3 P, Pr, Pl, Pt, Pb;
	P 	= GetViewPos(FS_IN_TexCoord);

	// Sample neighboring pixels
    Pr 	= GetViewPos(FS_IN_TexCoord + vec2( InvAORes.x, 0));
    Pl 	= GetViewPos(FS_IN_TexCoord + vec2(-InvAORes.x, 0));
    Pt 	= GetViewPos(FS_IN_TexCoord + vec2( 0, InvAORes.y));
    Pb 	= GetViewPos(FS_IN_TexCoord + vec2( 0,-InvAORes.y));

    // Calculate tangent basis vectors using the minimu difference
    vec3 dPdu = MinDiff(P, Pr, Pl);
    vec3 dPdv = MinDiff(P, Pt, Pb);// * (AORes.y * InvAORes.x);
	
	//vec3 view_space_normal = normalize(cross(dPdu, dPdv));
	vec3 view_space_normal =  texture(scene_normals, FS_IN_TexCoord).rgb;
	vec3 view_space_position = P;

    // Get the random samples from the noise texture
	vec3 randomVec = normalize(texture(noise_texture, FS_IN_TexCoord.xy * NoiseScale).rgb);

	vec3 tangent = normalize(randomVec - view_space_normal * dot(randomVec, view_space_normal));
    vec3 bitangent = cross(view_space_normal, tangent);
    mat3 TBN = mat3(tangent, bitangent, view_space_normal);
    // iterate over the sample kernel and calculate occlusion factor
    float occlusion = 0.0;

	for(int i=0;i<8;i++)
	{
		vec3 samplePos = TBN * samples[i]; // from tangent to view-space
        samplePos = view_space_position + samplePos * radius; 
        
        // project sample position (to sample texture) (to get position on screen/texture)
        vec4 offset = vec4(samplePos, 1.0);
        offset = projection * offset; // from view to clip-space
        offset.xyz /= offset.w; // perspective divide
        offset.xyz = offset.xyz * 0.5 + 0.5; // transform to range 0.0 - 1.0
        
        // get sample depth
        float sampleDepth = GetViewPos(offset.xy).z; // get depth value of kernel sample
        
        // range check & accumulate
        float rangeCheck = smoothstep(0.0, 1.0, radius / abs(view_space_position.z - sampleDepth));
        occlusion += (sampleDepth >= samplePos.z + bias ? 1.0 : 0.0) * rangeCheck;           
    }
    //occlusion = 1.0-(occlusion / float(8));
	occlusion = 0.0;
	FS_OUT_frag0 = vec3(pow(occlusion,1.0));
}