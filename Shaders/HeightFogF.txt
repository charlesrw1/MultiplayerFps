
layout(location = 0) out vec4 FS_OUT_Color;

layout(binding = 0) uniform sampler2D DEPTH;// depth texture (writes disabled)
layout(binding = 1) uniform samplerCube SkyCubemap;

#include "SharedGpuTypes.txt"

layout (binding = 0, std140) uniform Ubo_View_Constant_Buffer {
	Ubo_View_Constants_Struct g;
};
layout (binding = 1, std430) readonly buffer FogUniform_Buffer {
	FogUniforms fog;
}; 

vec3 WorldPosFromDepth(vec2 TexCoord, float depth) {

	// 7/30: reverse-Z change
    float z = depth;// * 2.0 - 1.0;

    vec4 clipSpacePosition = vec4(TexCoord * 2.0 - 1.0, z, 1.0);
    vec4 viewSpacePosition = g.inv_viewproj * clipSpacePosition;

    // Perspective division
    viewSpacePosition /= viewSpacePosition.w;

    return viewSpacePosition.xyz;
}

float compute_exponential_height_fog(
    vec3 worldPos,
    vec3 cameraPos,
    float rayLength,
    float fogDensity,
    float fogHeight,
    float heightFalloff)
{
    float startHeight = cameraPos.y - fogHeight;
    float endHeight = worldPos.y - fogHeight;

    float H = heightFalloff;

    float startExp = exp(-H * startHeight);
    float endExp   = exp(-H * endHeight);

    float deltaHeight = endHeight - startHeight;

    float fogAmount;
    if (abs(deltaHeight) > 1e-5) {
        fogAmount = (startExp - endExp) / (H * deltaHeight);
    } else {
        fogAmount = startExp / H;
    }

    fogAmount *= fogDensity * rayLength;

    return clamp(fogAmount, 0.0, 1.0);
}

void main()
{
	vec2 uv = vec2(gl_FragCoord.xy) / vec2(g.viewport_size.xy);
	float depth_value = texture(DEPTH,uv).r;
	
	vec3 worldspace = WorldPosFromDepth(uv, depth_value);
	vec3 camera_pos = g.viewpos_time.xyz;
	
	float to_world_pos_dist = length(worldspace-camera_pos);

	float factor = compute_exponential_height_fog(
		worldspace,
		camera_pos,
		to_world_pos_dist,
		fog.density,
		fog.height,
		fog.exp_falloff);
	
	bool use_cubemap_color = bool(fog.flags&1);
	vec3 fog_color = fog.color.rgb;
	if(use_cubemap_color) {
		vec3 dir = (worldspace-camera_pos)/to_world_pos_dist;
		fog_color = textureLod(SkyCubemap,dir,6.0).rgb;
	}
	
	FS_OUT_Color = vec4(fog_color,factor);
}