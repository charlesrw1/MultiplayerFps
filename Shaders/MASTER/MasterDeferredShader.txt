
// ******** START "include "SharedGpuTypes.txt"" ********

#include "SharedGpuTypes.txt"

// ******** END "include "SharedGpuTypes.txt"" ********

layout (binding = 0, std140) uniform Ubo_View_Constant_Buffer {
	Ubo_View_Constants_Struct g;
};
layout (binding = 2, std140) readonly buffer Object_Data_Buffer {
	Object_Instance g_objects[];
};
layout (binding = 3, std140) readonly buffer Object_Skin_Matricies {
	mat4 g_skin_matricies[];
};

layout (binding = 5, std430) readonly buffer Indirect_Instance_Buf {
	uint indirect_instance[];
};
layout(binding = 6, std430) readonly buffer Indirect_Mat_Buf {
	uint indirect_materials[];
};
layout (binding = 4, std430) readonly buffer GlobalMaterialBuffer {
	uint _material_param_buffer[];
};

#ifdef _VERTEX_SHADER


layout (location = 0) in vec3 VS_IN_Postion;
layout (location = 1) in vec2 VS_IN_TexCoord;
layout (location = 2) in vec3 VS_IN_Normal;
layout (location = 3) in vec3 VS_IN_Tangent;

layout (location = 4) in ivec4 VS_IN_BoneIndicies;
layout (location = 5) in vec4 VS_IN_BoneWeights;


flat out uint FS_IN_Objid;
flat out uint FS_IN_Matid;
out vec3 FS_IN_FragPos;
out vec3 FS_IN_Normal;
out vec2 FS_IN_Texcoord;
out vec3 FS_IN_BoneColor;
out vec4 FS_IN_NDC;
out vec4 FS_IN_PrevNDC;// for motion vectors

out mat3 FS_IN_TBN;

vec3 randColor(int number){
    return fract(sin(vec3(number+1)*vec3(12.8787, 1.97, 20.73739)));
}


uniform int indirect_material_offset = 0;

// standard vertex shader outputs
vec3 WORLD_POSITION_OFFSET = vec3(0.0);
mat4 ObjModelMatrix;

// ********** START USER CODE **********
___USER_VS_CODE___
// ********** END USER CODE **********

#ifdef ANIMATED
vec3 calc_local_animated_pos_last_frame(uint obj_index)
{
	vec3 local_pos = vec3(0.0);
	uint obj_skin_offset = g_objects[obj_index].prev_anim_mat_offset;
	for(int i=0;i<4;i++) {
		if(VS_IN_BoneIndicies[i]==-1)
			continue;
		vec3 posadded = vec3(g_skin_matricies[obj_skin_offset + VS_IN_BoneIndicies[i]]*vec4(VS_IN_Postion,1.0));
		local_pos += posadded * VS_IN_BoneWeights[i];
	}
	return local_pos;
}
#endif // !ANIMATED


void main()
{
	FS_IN_Matid = indirect_materials[indirect_material_offset + gl_DrawID];
	uint obj_index = indirect_instance[gl_BaseInstance + gl_InstanceID]; 
	FS_IN_Objid = obj_index;

	ObjModelMatrix = g_objects[obj_index].model;
	
	vec3 local_pos = vec3(0.0);
	vec3 local_normal = vec3(0.0);
	vec3 local_tangent = vec3(0.0);
#ifdef ANIMATED

	uint obj_skin_offset = g_objects[obj_index].anim_mat_offset;

	for(int i=0;i<4;i++) {
		if(VS_IN_BoneIndicies[i]==-1)
			continue;
		vec3 posadded = vec3(g_skin_matricies[obj_skin_offset + VS_IN_BoneIndicies[i]]*vec4(VS_IN_Postion,1.0));
		local_pos += posadded * VS_IN_BoneWeights[i];
		
		vec3 normaladded = mat3(g_skin_matricies[obj_skin_offset + VS_IN_BoneIndicies[i]])*VS_IN_Normal;
		local_normal += normaladded * VS_IN_BoneWeights[i];
		
		vec3 tangentadded = mat3(g_skin_matricies[obj_skin_offset + VS_IN_BoneIndicies[i]])*VS_IN_Tangent;
		local_tangent += tangentadded;
	}
	
#else	// (NOT ANIMATED)
	local_pos = VS_IN_Postion;
	local_normal = VS_IN_Normal;
	local_tangent = VS_IN_Tangent;

#endif // ANIMATED

//	vec3 local_pos = vec3(BoneTransform[VS_IN_Bone]*vec4(VS_IN_Postion,1.0));
#ifdef ANIMATED
	FS_IN_BoneColor = randColor(VS_IN_BoneIndicies.x)*VS_IN_BoneWeights.x+
		randColor(VS_IN_BoneIndicies.y)*VS_IN_BoneWeights.y+
		randColor(VS_IN_BoneIndicies.z)*VS_IN_BoneWeights.z+
		randColor(VS_IN_BoneIndicies.w)*VS_IN_BoneWeights.w;
#endif // ANIMATED

	
	FS_IN_FragPos = vec3(ObjModelMatrix * vec4(local_pos,1.0));
	
	VSmain();
	
	FS_IN_FragPos = FS_IN_FragPos + WORLD_POSITION_OFFSET;
	
	mat3 normal_matrix;
	if(bool(g_objects[obj_index].flags & INSTANCE_NON_UNIFORM_SCALE)) {
		normal_matrix = transpose(inverse(mat3(ObjModelMatrix)));
	}
	else {
		normal_matrix = mat3(ObjModelMatrix);
	}
	
    FS_IN_Normal = normal_matrix*normalize(local_normal);
	vec3 world_tangent = normal_matrix*normalize(local_tangent);

	vec3 world_bitangent = cross(FS_IN_Normal, world_tangent);
	FS_IN_TBN = mat3(
	normalize(local_tangent  ), 
	normalize(world_bitangent), 
	normalize(FS_IN_Normal   ));
    
    FS_IN_NDC = g.viewproj * vec4(FS_IN_FragPos, 1.0);
	
	#ifndef DEPTH_ONLY
	{
		// calc last position for motion vectors
		#ifdef ANIMATED
			vec3 prev_local_pos = calc_local_animated_pos_last_frame(obj_index);
		#else
			vec3 prev_local_pos = local_pos;
		#endif
		
		vec4 lastfrag_pos = g_objects[obj_index].prev_model*vec4(prev_local_pos,1.0) + vec4(WORLD_POSITION_OFFSET,0.0);	// hack for WPO,not right
		FS_IN_PrevNDC = g.prev_viewproj * vec4(lastfrag_pos.xyz,1.0);
	}
	#endif

	gl_Position = FS_IN_NDC;
	FS_IN_Texcoord = VS_IN_TexCoord;
}

#endif // _VERTEX_SHADER

#ifdef _FRAGMENT_SHADER

#ifdef FORWARD_SHADER
	layout (location = 0) out vec4 SCENE_OUT_Color;
#else
	layout (location = 0) out vec3 GBUFFER_OUT_Normal;
	layout (location = 1) out vec4 GBUFFER_OUT_Albedo_AO;
	layout (location = 2) out vec4 GBUFFER_OUT_M_R_Custom_Matid;
	layout (location = 3) out vec4 GBUFFER_OUT_Emissive;
	layout (location=5) out vec2 GBUFFER_OUT_MotionVector;
#endif

#ifdef EDITOR_ID
	layout(location = 4) out vec4 GBUFFER_OUT_EditorID;
#endif

flat in uint FS_IN_Objid;
flat in uint FS_IN_Matid;
in vec3 FS_IN_FragPos;
in vec3 FS_IN_Normal;
in vec2 FS_IN_Texcoord;
in vec3 FS_IN_BoneColor;
in vec4 FS_IN_NDC;
in vec4 FS_IN_PrevNDC;



in mat3 FS_IN_TBN;

vec3 randColor(uint number){
    return fract(sin(vec3(number+1)*vec3(12.8787, 1.97, 20.73739)));
}

// standard outputs
vec3 BASE_COLOR = vec3(0.0);	// albedo
float ROUGHNESS = 0.5;
float METALLIC = 0.0;
vec3 EMISSIVE = vec3(0.0);		// emissive color, added after lighting (also main input for unlit)
vec3 NORMALMAP = vec3(0.5,0.5,1.0);		// tangent space normal map
float OPACITY = 1.0;					// opacity, for alpha test
float AOMAP = 1.0;						// small detail ao map

// const uint _MATERIAL_TYPE = <shading_model>

// ********** START USER CODE **********
___USER_FS_CODE___
// ********** END USER CODE **********

void main()
{
	FSmain();
#ifdef ALPHATEST
	if(OPACITY<0.5)
		discard;
#endif // ALPHATEST

#ifndef DEPTH_ONLY

	#ifdef FORWARD_SHADER
		SCENE_OUT_Color = vec4(EMISSIVE,OPACITY);

	#else
		GBUFFER_OUT_Albedo_AO = vec4(BASE_COLOR*AOMAP, AOMAP);
		GBUFFER_OUT_M_R_Custom_Matid = vec4(METALLIC,ROUGHNESS,0,float(_MATERIAL_TYPE)/255.0);
		GBUFFER_OUT_Emissive = vec4(EMISSIVE,1.0);
		
		vec3 Normalized_IN_N = normalize(FS_IN_Normal);
		
		// World space normal
		vec3 Final_Normal = NORMALMAP * 2 - vec3(1.0);	// 0,1 -> -1,1
		Final_Normal = normalize(FS_IN_TBN * Final_Normal); 

		GBUFFER_OUT_Normal = Final_Normal;
		
		
		// Motion vectors
		{
			vec2 prev_position = FS_IN_PrevNDC.xy / FS_IN_PrevNDC.w;
			vec2 cur_position = FS_IN_NDC.xy / FS_IN_NDC.w;
			vec2 ss_velocity = (prev_position-cur_position)*0.5 + vec2(0.5);
			ss_velocity -= g.current_and_prev_jitter.xy;// current
			ss_velocity += g.current_and_prev_jitter.zw;// prev
			
			GBUFFER_OUT_MotionVector = ss_velocity;
		}
		
	
	#endif // FORWARD_SHADER

#ifdef DEBUG_SHADER
	#ifndef FORWARD_SHADER
		if(g.debug_options == DEBUG_OBJID)
			GBUFFER_OUT_Emissive.rgb = randColor(FS_IN_Objid);
		else if(g.debug_options == DEBUG_MATID)
			GBUFFER_OUT_Emissive.rgb = randColor(FS_IN_Matid+279343);
		else if(g.debug_options == DEBUG_NORMAL)
			GBUFFER_OUT_Emissive.rgb = (GBUFFER_OUT_Normal.rgb*0.5+vec3(0.5));
		else if(g.debug_options == DEBUG_ALBEDO)
			GBUFFER_OUT_Emissive.rgb = BASE_COLOR;
		else if(g.debug_options == DEBUG_WIREFRAME) {
			if((g.flags & 1)!=0)	// second pass
				GBUFFER_OUT_Emissive = vec4(0.0,0.5,0.5,1.0);
			else	// first pass (black)
				GBUFFER_OUT_Emissive = vec4(0,0,0,1.0);
		}
	#endif	// FORWARD_SHADER
#endif // DEBUG_SHADER

#ifdef EDITOR_ID
	uint color_to_output = FS_IN_Objid + 1;	// to use nullptr,...
	uint R = color_to_output & 255;
	uint G = (color_to_output >> 8) & 255;
	uint B = (color_to_output >> 16) & 255;
	uint A = (color_to_output >> 24) & 255;
	
	GBUFFER_OUT_EditorID = vec4(float(R)/255.0,float(G)/255.0,float(B)/255.0,float(A)/255.0);
#endif	// EDITOR_ID

#endif	// DEPTH_ONLY

}

#endif // _FRAGMENT_SHADER
