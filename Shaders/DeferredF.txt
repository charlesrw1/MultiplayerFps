
layout (location = 0) out vec3 GBUFFER_OUT_Normal;
layout (location = 1) out vec4 GBUFFER_OUT_Albedo_AO;
layout (location = 2) out vec4 GBUFFER_OUT_M_R_Custom_Matid;
layout (location = 3) out vec4 GBUFFER_OUT_Emissive;

#ifdef EDITOR_ID
layout(location = 4) out vec4 GBUFFER_OUT_EditorID;
#endif

flat in uint FS_IN_Objid;
flat in uint FS_IN_Matid;
in vec3 FS_IN_FragPos;
in vec3 FS_IN_Normal;
in vec2 FS_IN_Texcoord;
in vec3 FS_IN_BoneColor;
in vec4 FS_IN_NDC;


#ifdef VERTEX_COLOR
in vec4 FS_IN_Color;
#endif

#ifdef LIGHTMAPPED
in vec2 FS_IN_TexCoord2;
uniform sampler2D lightmap;
#endif

#ifdef NORMALMAPPED
in mat3 FS_IN_TBN;
#endif

uniform sampler2D basecolor;
uniform sampler2D normal_tex;
uniform sampler2D roughness_tex;
uniform sampler2D metalness_tex;
uniform sampler2D ao_tex;

uniform sampler2D caustictex;

#include "SharedGpuTypes.txt"

layout (binding = 2, std140) readonly buffer Object_Data_Buffer {
	Object_Instance g_objects[];
};

layout (binding = 0, std140) uniform Ubo_View_Constant_Buffer {
	Ubo_View_Constants_Struct g;
};

layout(binding = 4,std430) readonly buffer Material_Buffer {
	Material_Data g_materials[];
};


vec3 randColor(uint number){
    return fract(sin(vec3(number+1)*vec3(12.8787, 1.97, 20.73739)));
}


float dither_pattern[16] = {
	1.0 / 17.0,  9.0 / 17.0,  3.0 / 17.0, 11.0 / 17.0,
13.0 / 17.0,  5.0 / 17.0, 15.0 / 17.0,  7.0 / 17.0,
4.0 / 17.0, 12.0 / 17.0,  2.0 / 17.0, 10.0 / 17.0,
16.0 / 17.0,  8.0 / 17.0, 14.0 / 17.0,  6.0 / 17.0
};

// standard outputs
vec3 BASE_COLOR = vec3(0.0);	// albedo
float ROUGHNESS = 0.5;
float METALLIC = 0.0;
vec3 EMISSIVE = vec3(0.0);		// emissive color, added after lighting (also main input for unlit)
vec3 NORMALMAP = vec3(0.5,1.0,0.5);		// tangent space normal map
float OPACITY = 1.0;					// opacity, for alpha test
float AOMAP = 0.0;						// small detail ao map

void FSmain()
{
#ifdef UNLIT

#else
	vec2 roughness_metal = texture(roughness_tex, FS_IN_Texcoord).gb;
	float ambient_occlusion = texture(ao_tex, FS_IN_Texcoord).r;
	float metalness = texture(metalness_tex,FS_IN_Texcoord).r;
	
	vec4 color_tint = vec4(g_objects[FS_IN_Objid].colorval);
	color_tint *= g_materials[FS_IN_Matid].diffuse_tint;
	
	vec4 albedo = texture(basecolor, vec2(FS_IN_Texcoord.x,FS_IN_Texcoord.y));
	albedo.rgb = pow(albedo.rgb,vec3(2.2));
	
	OPACITY = albedo.a;
	BASE_COLOR = vec3(albedo)*color_tint.rgb;
	METALLIC = 0.0;//metalness;
	AOMAP = ambient_occlusion;
	ROUGHNESS = 0.9;//roughness_metal.x;
	
	EMISSIVE = vec3(0.0);//albedo.rgb*color_tint.rgb;
#endif
}

void main()
{
	FSmain();

#ifdef ALPHATEST
	if(OPACITY<0.5)
		discard;
#endif // ALPHATEST

	GBUFFER_OUT_Albedo_AO = vec4(BASE_COLOR, AOMAP);
	GBUFFER_OUT_M_R_Custom_Matid = vec4(METALLIC,ROUGHNESS,0,0);
	GBUFFER_OUT_Emissive = vec4(EMISSIVE,1.0);
	
	vec3 Normalized_IN_N = normalize(FS_IN_Normal);
	
	// World space normal

#ifdef NORMALMAPPED
	vec3 Final_Normal = NORMALMAP * 2 - vec3(1.0);	// 0,1 -> -1,1
	Final_Normal = normalize(FS_IN_TBN * Final_Normal); 
	GBUFFER_OUT_Normal = Final_Normal;
#else
	GBUFFER_OUT_Normal = Normalized_IN_N;
#endif

#ifdef DEBUG_SHADER
	if(g.debug_options == DEBUG_OBJID)
		GBUFFER_OUT_Emissive.rgb = randColor(FS_IN_Objid);
	else if(g.debug_options == DEBUG_MATID)
		GBUFFER_OUT_Emissive.rgb = randColor(FS_IN_Matid);
	else if(g.debug_options == DEBUG_NORMAL)
		GBUFFER_OUT_Emissive.rgb = (GBUFFER_OUT_Normal.rgb*0.5+vec3(0.5));
	else if(g.debug_options == DEBUG_ALBEDO)
		GBUFFER_OUT_Emissive.rgb = BASE_COLOR;
	else if(g.debug_options == DEBUG_WIREFRAME)
		GBUFFER_OUT_Emissive = vec4(0.0,0.5,0.5,1.0);
#endif // DEBUG_SHADER

#ifdef EDITOR_ID
	uint color_to_output = FS_IN_Objid + 1;	// to use nullptr,...
	uint R = color_to_output & 255;
	uint G = (color_to_output >> 8) & 255;
	uint B = (color_to_output >> 16) & 255;
	uint A = (color_to_output >> 24) & 255;
	
	GBUFFER_OUT_EditorID = vec4(R/255.0,G/255.0,B/255.0,A/255.0);
#endif

}	