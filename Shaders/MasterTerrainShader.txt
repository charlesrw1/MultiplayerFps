
#include "SharedGpuTypes.txt"

#ifdef _VERTEX_SHADER

layout (location = 0) in vec3 VS_IN_Pos;
layout (location = 1) in vec2 VS_IN_Texcoord;

out vec2 TCS_IN_Texcoord;

void main()
{
    TCS_IN_Texcoord = VS_IN_Texcoord;
    gl_Position = vec4(VS_IN_Pos, 1.0);
}
#endif

#ifdef _TESS_CTRL_SHADER

layout (vertices=4) out;
in vec2 TCS_IN_Texcoord[];	// from vertex shader
out vec2 TES_IN_Texcoord[];	// to tess eval shader

in gl_PerVertex
{
	vec4 gl_Position;
	float gl_PointSize;
	float gl_ClipDistance[];
} gl_in[gl_MaxPatchVertices];
uniform mat4 ViewProj;
uniform mat4 Model = mat4(1);

uniform int MIN_TESS_LEVEL = 4;
uniform int MAX_TESS_LEVEL = 40;
uniform float MIN_DISTANCE = 0.5;
uniform float MAX_DISTANCE = 80;

void main()
{
	gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;
	TES_IN_Texcoord[gl_InvocationID] = TCS_IN_Texcoord[gl_InvocationID];
	// set tesselation level
	if (gl_InvocationID == 0) {

		vec4 eyeSpacePos00 = ViewProj * gl_in[0].gl_Position;
		vec4 eyeSpacePos01 = ViewProj * gl_in[1].gl_Position;
		vec4 eyeSpacePos10 = ViewProj * gl_in[2].gl_Position;
		vec4 eyeSpacePos11 = ViewProj * gl_in[3].gl_Position;

    // Step 3: "distance" from camera scaled between 0 and 1
    float distance00 = clamp((abs(eyeSpacePos00.z)-MIN_DISTANCE) / (MAX_DISTANCE-MIN_DISTANCE), 0.0, 1.0);
    float distance01 = clamp((abs(eyeSpacePos01.z)-MIN_DISTANCE) / (MAX_DISTANCE-MIN_DISTANCE), 0.0, 1.0);
    float distance10 = clamp((abs(eyeSpacePos10.z)-MIN_DISTANCE) / (MAX_DISTANCE-MIN_DISTANCE), 0.0, 1.0);
    float distance11 = clamp((abs(eyeSpacePos11.z)-MIN_DISTANCE) / (MAX_DISTANCE-MIN_DISTANCE), 0.0, 1.0);

    // ----------------------------------------------------------------------
    // Step 4: interpolate edge tessellation level based on closer vertex
    float tessLevel0 = mix( MAX_TESS_LEVEL, MIN_TESS_LEVEL, min(distance10, distance00) );
    float tessLevel1 = mix( MAX_TESS_LEVEL, MIN_TESS_LEVEL, min(distance00, distance01) );
    float tessLevel2 = mix( MAX_TESS_LEVEL, MIN_TESS_LEVEL, min(distance01, distance11) );
    float tessLevel3 = mix( MAX_TESS_LEVEL, MIN_TESS_LEVEL, min(distance11, distance10) );

    // ----------------------------------------------------------------------
    // Step 5: set the corresponding outer edge tessellation levels
    gl_TessLevelOuter[0] = tessLevel0;
    gl_TessLevelOuter[1] = tessLevel1;
    gl_TessLevelOuter[2] = tessLevel2;
    gl_TessLevelOuter[3] = tessLevel3;

    // ----------------------------------------------------------------------
    // Step 6: set the inner tessellation levels to the max of the two parallel edges
    gl_TessLevelInner[0] = max(tessLevel1, tessLevel3);
    gl_TessLevelInner[1] = max(tessLevel0, tessLevel2);
	}
}

#endif // _TESS_CTRL_SHADER

#ifdef _TESS_EVAL_SHADER

layout (quads, fractional_odd_spacing, ccw) in;
layout(binding = 12) uniform sampler2D HeightMap;
in vec2 TES_IN_Texcoord[];	// from tess control shader

out vec3 FS_IN_FragPos;
out vec2 FS_IN_Texcoord;

uniform mat4 ViewProj;
uniform mat4 Model = mat4(1);
uniform float WorldScale;
uniform float VerticalScale;
void main()
{
	// patch coordinates
	float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;
	
	// texture coords from patch corners
    vec2 t00 = TES_IN_Texcoord[0];
    vec2 t01 = TES_IN_Texcoord[1];
    vec2 t10 = TES_IN_Texcoord[2];
    vec2 t11 = TES_IN_Texcoord[3];
    // bilinear interp over patch
    vec2 t0 = (t01 - t00) * u + t00;
    vec2 t1 = (t11 - t10) * u + t10;
    vec2 texCoord = (t1 - t0) * v + t0;
	// sample the heightmap
	
	// position of patch corners
	vec4 p00 = gl_in[0].gl_Position;
    vec4 p01 = gl_in[1].gl_Position;
    vec4 p10 = gl_in[2].gl_Position;
    vec4 p11 = gl_in[3].gl_Position;

    // bilinearly interpolate position coordinate across patch
    vec4 p0 = (p01 - p00) * u + p00;
    vec4 p1 = (p11 - p10) * u + p10;
    vec4 position = (p1 - p0) * v + p0;
	
	const float HScale = VerticalScale;
	
	// Calculate the model-space position
    position.y = HScale * texture( HeightMap, texCoord ).r;
    position.w = 1.0;

	FS_IN_Texcoord = texCoord;
	FS_IN_FragPos = position.xyz;
    // ----------------------------------------------------------------------
    // output patch point position in clip space
    gl_Position = ViewProj  * vec4(position.xyz,1.0);
}


#endif // _TESS_EVAL_SHADER

#ifdef _FRAGMENT_SHADER


layout (binding = 0, std140) uniform Ubo_View_Constant_Buffer {
	Ubo_View_Constants_Struct g;
};

layout (binding = 4, std430) readonly buffer GlobalMaterialBuffer {
	uint _material_param_buffer[];
};


layout (location = 0) out vec3 GBUFFER_OUT_Normal;
layout (location = 1) out vec4 GBUFFER_OUT_Albedo_AO;
layout (location = 2) out vec4 GBUFFER_OUT_M_R_Custom_Matid;
layout (location = 3) out vec4 GBUFFER_OUT_Emissive;

#ifdef EDITOR_ID
layout(location = 4) out vec4 GBUFFER_OUT_EditorID;
#endif


// "fake" FS_IN variables
uniform uint FS_IN_Objid = 0;
uniform uint FS_IN_Matid = 0;
vec3 FS_IN_Normal;
mat3 FS_IN_TBN;

in vec3 FS_IN_FragPos;
in vec2 FS_IN_Texcoord;

uniform float VerticalScale;
layout(binding = 12 /* fixme */) uniform sampler2D HeightMap;
uniform float WorldScale;

// standard outputs
vec3 BASE_COLOR = vec3(0.0);	// albedo
float ROUGHNESS = 0.5;
float METALLIC = 0.0;
vec3 EMISSIVE = vec3(0.0);		// emissive color, added after lighting (also main input for unlit)
vec3 NORMALMAP = vec3(0.5,0.5,1.0);		// tangent space normal map
float OPACITY = 1.0;					// opacity, for alpha test
float AOMAP = 0.0;						// small detail ao map

// ******* START USER CODE **********
___USER_FS_CODE___
// ******* END USER CODE ***********


vec3 randColor(uint number){
    return fract(sin(vec3(number+1)*vec3(12.8787, 1.97, 20.73739)));
}

void main()
{
#ifndef DEPTH_ONLY
	const vec2 texCoord = FS_IN_Texcoord;
	const float HScale = VerticalScale;
	const ivec3 offset = ivec3( -1, 0, 1 ); // Texel offsets
    float delta = 2.0 * WorldScale / textureSize( HeightMap, 0 ).x; // Horizontal displacement in world coords
    float left   = HScale * textureOffset( HeightMap, texCoord, offset.xy ).r;
    float right  = HScale * textureOffset( HeightMap,texCoord, offset.zy ).r;
    float top    = HScale * textureOffset( HeightMap, texCoord, offset.yz ).r;
    float bottom = HScale * textureOffset( HeightMap, texCoord, offset.yx ).r;
    vec3 x = normalize( vec3( delta, right - left, 0.0 ) );
    vec3 z = normalize( vec3( 0.0, top - bottom, delta ) );
    const vec3 n = cross( z, x );
	FS_IN_Normal = n;
	
	vec3 bitangent = normalize(cross(vec3(1,0,0),FS_IN_Normal));
	vec3 tangent = cross(bitangent, FS_IN_Normal);
	FS_IN_TBN = mat3(
		-tangent,
		-bitangent,
		FS_IN_Normal
	);
	
	// Now call user code
	FSmain();
	
	vec3 Final_Normal = NORMALMAP * 2 - vec3(1.0);	// 0,1 -> -1,1
	Final_Normal = normalize(FS_IN_TBN * Final_Normal); 
	GBUFFER_OUT_Normal = Final_Normal;

	GBUFFER_OUT_Albedo_AO = vec4(BASE_COLOR, AOMAP);
	GBUFFER_OUT_M_R_Custom_Matid = vec4(METALLIC,ROUGHNESS,0,0);
	GBUFFER_OUT_Emissive = vec4(EMISSIVE,1.0);
	
#ifdef EDITOR_ID
	uint color_to_output = FS_IN_Objid + 1;	// to use nullptr,...
	uint R = color_to_output & 255;
	uint G = (color_to_output >> 8) & 255;
	uint B = (color_to_output >> 16) & 255;
	uint A = (color_to_output >> 24) & 255;
	
	GBUFFER_OUT_EditorID = vec4(R/255.0,G/255.0,B/255.0,A/255.0);
#endif

#ifdef DEBUG_SHADER
	if(g.debug_options == DEBUG_OBJID)
		GBUFFER_OUT_Emissive.rgb = randColor(FS_IN_Objid);
	else if(g.debug_options == DEBUG_MATID)
		GBUFFER_OUT_Emissive.rgb = randColor(FS_IN_Matid+279343);
	else if(g.debug_options == DEBUG_NORMAL)
		GBUFFER_OUT_Emissive.rgb = (GBUFFER_OUT_Normal.rgb*0.5+vec3(0.5));
	else if(g.debug_options == DEBUG_ALBEDO)
		GBUFFER_OUT_Emissive.rgb = BASE_COLOR;
	else if(g.debug_options == DEBUG_WIREFRAME)
		GBUFFER_OUT_Emissive = vec4(0.0,0.5,0.5,1.0);
#endif // DEBUG_SHADER

#endif	// DEPTH_ONLY
	
}

#endif // _FRAGMENT_SHADER