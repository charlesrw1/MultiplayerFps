
in vec3 FS_IN_Fragpos;
out vec4 FS_OUT_FragColor;
uniform samplerCube cubemap;
uniform float roughness;
#define PI 3.1415926536


float RadicalInverse_VdC(uint bits) 
{
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10; // 0x100000000
}
vec2 Hammersley(uint i, uint N)
{
    return vec2(float(i)/float(N), RadicalInverse_VdC(i));
} 

vec3 importance_sample_ggx(vec2 xi,vec3 N,float roughness)
{
	float a=roughness*roughness;
	float phi = 2*PI*xi.x;
	float cos_theta = sqrt((1.0-xi.y)/(1.0+(a*a-1.0)*xi.y));
	float sin_theta = sqrt(1.0-cos_theta*cos_theta);
	
	vec3 H;
	H.x=cos(phi)*sin_theta;
	H.y=sin(phi)*sin_theta;
	H.z=cos_theta;
	
	vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangent   = normalize(cross(up, N));
    vec3 bitangent = cross(N, tangent);
	
    vec3 sample_v = tangent * H.x + bitangent * H.y + N * H.z;
	return sample_v;
}

void main()
{
	vec3 N = normalize(FS_IN_Fragpos);
	vec3 R=N;
	vec3 V=R;
	
	
	vec3 prefiltered = vec3(0);
	float total_weight=0.0;
	const uint SAMPLES = 1024;
	for(uint i=0u;i<SAMPLES;i++)
	{
		vec2 xi = Hammersley(i,SAMPLES);
		vec3 H = importance_sample_ggx(xi,N,roughness);
		vec3 L = normalize(2.0*dot(V,H)*H-V);
		float ndotl = max(dot(N,L),0.0);
		if(ndotl>0) {
			prefiltered+=textureLod(cubemap,L,0.0 /* sample from first mip */).rgb*ndotl;
			total_weight+=ndotl;
		}
	}
	prefiltered=prefiltered/total_weight;
	FS_OUT_FragColor =vec4(prefiltered,1.0);
}
	