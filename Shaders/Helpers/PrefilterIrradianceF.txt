
in vec3 FS_IN_Fragpos;
out vec4 FS_OUT_FragColor;
uniform samplerCube cubemap;

#define PI 3.1415926536

void main()
{
	vec3 N = normalize(FS_IN_Fragpos);
	vec3 irradiance = vec3(0);
	
	vec3 up = vec3(0,1,0);
	vec3 right = normalize(cross(up,N));
	up = cross(N,right);
	
	float sample_delta = 0.025;
	uint num_samples = 0;
	for(float phi=0.0;phi<2.0*PI;phi+=sample_delta)
	{
		for(float theta=0.0;theta<0.5*PI;theta+=sample_delta)
		{
			vec3 tangent_sample = vec3(sin(theta)*cos(phi),sin(theta)*sin(phi),cos(theta));
			vec3 sample_v = tangent_sample.x*right+tangent_sample.y*up+tangent_sample.z*N;
			irradiance += textureLod(cubemap,sample_v,0.0).rgb*cos(theta)*sin(theta);
			num_samples++;
		}
	}
	irradiance = PI*irradiance*(1.0/float(num_samples));
	FS_OUT_FragColor = vec4(irradiance,1.0);
}
	