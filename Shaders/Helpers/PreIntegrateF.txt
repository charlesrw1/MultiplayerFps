#version 430 core
in vec2 FS_IN_TexCoord;
out vec4 FS_OUT_FragColor;

#define PI 3.1415926536


float RadicalInverse_VdC(uint bits) 
{
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10; // 0x100000000
}
vec2 Hammersley(uint i, uint N)
{
    return vec2(float(i)/float(N), RadicalInverse_VdC(i));
} 

vec3 ImportanceSampleGGX(vec2 xi,vec3 N,float roughness)
{
	float a=roughness*roughness;
	float phi = 2*PI*xi.x;
	float cos_theta = sqrt((1.0-xi.y)/(1.0+(a*a-1.0)*xi.y));
	float sin_theta = sqrt(1.0-cos_theta*cos_theta);
	
	vec3 H;
	H.x=cos(phi)*sin_theta;
	H.y=sin(phi)*sin_theta;
	H.z=cos_theta;
	
	vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangent   = normalize(cross(up, N));
    vec3 bitangent = cross(N, tangent);
	
    vec3 sample_v = tangent * H.x + bitangent * H.y + N * H.z;
	return sample_v;
}

float GeometryShlickGGX(float NdotV, float roughness)
{
	float a=roughness;
	float k = (a*a)/2.0;
	
	float nom = NdotV;
	float denom = NdotV*(1.0-k)+k;
	return nom/denom;
}

float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
	float ggx1 = GeometryShlickGGX(max(dot(N,V),0.0),roughness);
	float ggx2 = GeometryShlickGGX(max(dot(N,L),0.0),roughness);
	return ggx1*ggx2;
}
vec2 IntegrateBRDF(float ndotv,float roughness)
{
	vec3 V;
	V.x = sqrt(1-ndotv*ndotv);
	V.y = 0;
	V.z = ndotv;
	
	float A;
	float B;
	vec3 N = vec3(0.0,0.0,1.0);
	const uint SAMPLE_COUNT = 1024;
	for(uint i=0;i<SAMPLE_COUNT;i++)
	{
		vec2 xi = Hammersley(i,SAMPLE_COUNT);
		vec3 H = ImportanceSampleGGX(xi,N,roughness);
		vec3 L = normalize(2.0*dot(V,H)*H-V);
		float ndotl = max(L.z,0);
		float ndoth = max(H.z,0);
		float vdoth = max(dot(V,H),0);
		if(ndotl>0.0)
		{
			float G = GeometrySmith(N,V,L,roughness);
			float G_vis = (G*vdoth)/(ndoth*ndotv);
			float Fc = pow(1.0-vdoth,5.0);
			
			A+=(1.0-Fc)*G_vis;
			B+=(Fc)*G_vis;
		}
	}
	A/=float(SAMPLE_COUNT);
	B/=float(SAMPLE_COUNT);
	return vec2(A,B);
}
void main()
{
	vec2 tex_coords = gl_FragCoord.xy/vec2(512);
	FS_OUT_FragColor = vec4(IntegrateBRDF(tex_coords.x,tex_coords.y),0,1);
}
	
	
	
	