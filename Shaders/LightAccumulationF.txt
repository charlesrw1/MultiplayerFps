

#ifdef DEPTHONLY
void main()
{
}

#else

layout(location = 0) out vec4 FS_OUT_Color;

layout(binding = 0) uniform sampler2D GBUFFER0;		// ws normal (xyz)
layout(binding = 1) uniform sampler2D GBUFFER1;		// albedo, ao
layout(binding = 2) uniform sampler2D GBUFFER2;		// metallic,roughness, custom, matid
layout(binding = 3) uniform sampler2D DEPTH;		// depth texture (writes disabled)

#include "SharedGpuTypes.txt"

layout (binding = 0, std140) uniform Ubo_View_Constant_Buffer {
	Ubo_View_Constants_Struct g;
};

uniform vec3 spot_normal;
uniform vec3 position;
uniform bool is_spot_light = false;
uniform float spot_inner;
uniform float spot_angle;
uniform vec3 color=vec3(300.0);
uniform float radius;

float linearize_depth(float d,float zNear,float zFar)
{
    float z_n = 2.0 * d - 1.0;
    return 2.0 * zNear * zFar / (zFar + zNear - z_n * (zFar - zNear));
}

vec3 WorldPosFromDepth(vec2 TexCoord, float depth) {

	// 7/30: reverse-Z change
    float z = depth;// * 2.0 - 1.0;

    vec4 clipSpacePosition = vec4(TexCoord * 2.0 - 1.0, z, 1.0);
    vec4 viewSpacePosition = g.inv_viewproj * clipSpacePosition;

    // Perspective division
    viewSpacePosition /= viewSpacePosition.w;

    return viewSpacePosition.xyz;
}

#define PI 3.1415927
// ----------------------------------------------------------------------------
float DistributionGGX(vec3 N, vec3 H, float roughness)
{
    float a = roughness*roughness;
    float a2 = a*a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;

    float nom   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return nom / max(denom,0.0000001);
}
// ----------------------------------------------------------------------------
float GeometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;

    float nom   = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return nom / denom;
}
// ----------------------------------------------------------------------------
float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2 = GeometrySchlickGGX(NdotV, roughness);
    float ggx1 = GeometrySchlickGGX(NdotL, roughness);

    return ggx1 * ggx2;
}
// ----------------------------------------------------------------------------
vec3 fresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}
vec3 FresnelSchlickRougness(float cosTheta, vec3 F0, float roughness)
{
	 return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}

vec3 pbr_calculate(vec3 LightColor, vec3 LighDir, vec3 worldspace, vec3 Albedo, float Roughness, float Metalness, vec3 Normal)
{
	vec3 view_pos = g.viewpos_time.xyz;
	vec3 view_front = g.viewfront.xyz;

	vec3 V = normalize(view_pos-worldspace);
	
	vec3 R = reflect(-V,Normal);
	vec3 F0 = vec3(0.04);
	F0 = mix(F0,Albedo,Metalness);

	vec3 Lo = vec3(0.0);
    vec3 H = normalize(V + LighDir);
    vec3 radiance = LightColor;

        // Cook-Torrance BRDF
        float NDF = DistributionGGX(Normal, H, Roughness);   
        float G   = GeometrySmith(Normal, V, LighDir, Roughness);    
        vec3 F    = fresnelSchlick(max(dot(H, V), 0.0), F0);        
        
        vec3 numerator    = NDF * G * F;
        float denominator = 4.0 * max(dot(Normal, V), 0.0) * max(dot(Normal, LighDir), 0.0) + 0.0001; // + 0.0001 to prevent divide by zero
        vec3 specular = numerator / 1.0;
        vec3 kS = F;
        vec3 kD = vec3(1.0) - kS;
        kD *= 1.0 - Metalness;	                
          
		float NdotL = max(dot(Normal, LighDir), 0.0);        

		// add to outgoing radiance Lo
		Lo += (kD * Albedo / PI + specular) * radiance * NdotL;
	
	return Lo;
}





void main()
{
	vec2 uv = vec2(gl_FragCoord.xy) / vec2(g.viewport_size.xy);
	//
	vec4 metal_rough = texture(GBUFFER2,uv);
	vec4 albedo = texture(GBUFFER1,uv);
	vec4 depth_tex = texture(DEPTH,uv);
	vec4 normal_t = texture(GBUFFER0,uv);
	
	float depth_value = depth_tex.r;
	
	vec3 worldspace = WorldPosFromDepth(uv, depth_value);
	
	float distance_to_light = length(position-worldspace);
	vec3 L = (position - worldspace)/distance_to_light;
	
	float distance_to_light_2 = distance_to_light*distance_to_light;
	float radius_2 = radius*radius;
	float attenuation = 1.0/distance_to_light_2 * clamp(1-distance_to_light_2/radius_2,0.0,1.0);
	
	vec3 out_color = pbr_calculate(color, L, worldspace, albedo.xyz, metal_rough.y, metal_rough.x, normal_t.xyz);
	
	if(is_spot_light) {
		float angle = dot(-L, spot_normal);
		attenuation *= clamp((-spot_angle+angle) / (spot_inner-spot_angle), 0.0, 1.0);    
	}
	
	
	FS_OUT_Color = vec4(out_color*attenuation,1.0);//vec4(linearize_depth(depth_value,0.01,100.0)*0.02);
}
#endif 