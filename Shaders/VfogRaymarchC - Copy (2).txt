#version 430 core

layout(local_size_x = 8, local_size_y=8,local_size_z=1) in;
layout(rgba16f,binding =2) uniform image3D  VolumeTexture;
layout(rgba16f,binding =5) uniform image3D  OutputVolumeTexture;

struct Vfog_Params
{
	ivec4 volumesize;
	vec4 spread_frustumend;
	vec4 reprojection;
	mat4 last_view;
};
layout (binding = 4, std140) uniform Vfog_Param_Buffer {
	Vfog_Params fogparam;
};


#define MAXDEPTH 64

vec4 AccumulateScattering(vec4 curslice,vec4 nextslice, float deltaz)
{
	vec3 light = curslice.rgb+exp(-curslice.a)*nextslice.rgb;
	return vec4(light,curslice.a+nextslice.a);
	//return vec4(curslice+nextslice);
}
void WriteOutput(ivec3 pos, vec4 colordensity)
{
	vec4 finalval = vec4(colordensity.rgb,exp(-colordensity.a));
	imageStore(VolumeTexture,pos,finalval);
}

uniform float znear;
uniform float zfar;

float GetPlaneDist(uint z)
{
	return znear*pow(zfar/znear,float(z)/128.0);
}
float GetPlaneDist_New(uint z, float cell_depth)
{
	float d = float(z)*cell_depth + cell_depth*0.5;	// d: [0,1]
	d = pow(d, fogparam.spread_frustumend.x);
	return d*fogparam.spread_frustumend.y+znear;
}
#define NEWWAY
void main()
{
	uvec3 OutputCoords = gl_GlobalInvocationID.xyz;
	vec4 accumulatedscattrans=vec4(0.0,0.0,0.0,1.0);
	
	vec3 fog_cell_size = 1.0/vec3(fogparam.volumesize);
	
	//vec4 currentslice = imageLoad(VolumeTexture,ivec3(OutputCoords.xy,0));
	//WriteOutput(ivec3(OutputCoords),currentslice);
	float deltaz = 0.0;
	float prev_z = 0.0;
	for(uint z=0;z<128;z++)
	{
	
		float zslice = GetPlaneDist_New(z,fog_cell_size.z);
		float dist = abs(zslice-prev_z);
		vec4 fog = imageLoad(VolumeTexture,ivec3(OutputCoords.xy,z));
		float transmittance = exp(-fog.a*dist);
		accumulatedscattrans.rgb += ((fog.rgb-fog.rgb*transmittance)/max(fog.a,0.00001))*accumulatedscattrans.a;
		accumulatedscattrans.a *= transmittance;
		prev_z = zslice;
		
		//accumulatedscattrans.rgb += currentslice.rgb*accumulatedscattrans.a*deltaz;
		//accumulatedscattrans.a *= transmittance;
		imageStore(OutputVolumeTexture,ivec3(OutputCoords.xy,z),vec4(accumulatedscattrans.rgb,1.0-accumulatedscattrans.a));
	}
	//deltaz = GetPlaneDist(1)-GetPlaneDist(0);
	//for(uint z=1;z<64;z++)
	//{
	//	vec4 nextslice = imageLoad(VolumeTexture,ivec3(OutputCoords.xy,z));
	//	currentslice = AccumulateScattering(currentslice,nextslice,deltaz);
	//	WriteOutput(ivec3(OutputCoords.xy,z),currentslice/float(z+1));
	//}
}