#version 430 core

layout(local_size_x = 8, local_size_y=8,local_size_z=1) in;
layout(rgba16f,binding =2) uniform image3D  VolumeTexture;

#define PI 3.14159

float ComputeScattering(float lightDotView)
{
	float scattering = 0.001;
	float result=1.0-scattering*scattering;
	result /= (4.0*PI*pow(1.0+scattering*scattering-(2.0*scattering)*lightDotView,1.5));
	return result;
}

float phase_function(vec3 Wo, vec3 Wi, float g)
{
    float cos_theta = dot(Wo, Wi);
    float denom     = 1.0 + g * g + 2.0 * g * cos_theta;
    return (1.0 / (4.0 * PI)) * (1.0 - g * g) / max(pow(denom, 1.5), 0.0001);
}



uniform mat4 InvProjection;
uniform mat4 InvView;
uniform vec3 ViewPos;
uniform ivec3 TextureSize;

uniform float znear;
uniform float zfar;
uniform float density;
uniform float anisotropy;

vec4 ScreenToView(vec4 screenspace)
{
	vec4 clipspace = vec4(vec2(screenspace.xy)*2.0-vec2(1.0),screenspace.z,screenspace.w);
	
	vec4 viewspace = InvProjection*clipspace;
	viewspace = viewspace / viewspace.w;
	return viewspace;
}
vec3 ViewToWorld(vec4 viewspace)
{
	vec4 world = InvView*viewspace;
	world = world/world.w;
	return world.xyz;
}

vec3 LineIntersectionToZPlane(vec3 A, vec3 B, float zplane)
{
	vec3 normal = vec3(0.0,0.0,-1.0);
	vec3 ab = B-A;
	float t = (zplane-dot(normal,A))/dot(normal,ab);
	return A + t*ab;
}

vec3 randColor(int number){
    return fract(sin(vec3(number+1)*vec3(12.8787, 1.97, 20.73739)));
}

uniform vec3 spotlightpos;
uniform vec3 spotlightnormal;
uniform float spotlightangle;
uniform vec3 spotlightcolor;

void main()
{
	ivec3 fragcoords = ivec3(gl_GlobalInvocationID.xyz);
	vec3 invpixelsize = 1/vec3(TextureSize);
	vec3 screencoord = vec3(fragcoords)*invpixelsize;
	vec4 point_ss = vec4(vec2(screencoord.x,screencoord.y)+vec2(0.5)*invpixelsize.xy,-1.0,1.0);
	vec4 point_vs = ScreenToView(point_ss);
	
	float tilez = znear*pow(zfar/znear,screencoord.z);
	
	vec3 viewspace_point = LineIntersectionToZPlane(vec3(0.0),point_vs.xyz,tilez);
	
	vec3 worldpos = ViewToWorld(vec4(viewspace_point,1.0));
	
	vec3 raydir = normalize(worldpos-ViewPos);

	vec3 inscattering = vec3(0.0);
	
	vec3 spotdir = worldpos-spotlightpos;
	float spotlen = length(spotdir);
	spotdir = spotdir/spotlen;
	vec3 spotadd = vec3(0.0);
	if(dot(spotdir,-spotlightnormal)>spotlightangle) {
		spotadd = phase_function(raydir,spotdir,anisotropy)*spotlightcolor*5.0/(spotlen*spotlen);
	}
	
	//vec3 spotadd = 10.0*spotlightcolor/(spotlen,spotlen);//(dot(spotdir,spotlightnormal)>spotlightangle)?spotlightcolor*(1/(spotlen*spotlen))*phase_function(raydir,spotdir,anisotropy) : vec3(0);
	inscattering += spotadd;
	
	
	float edensity = exp(-density);
	vec4 coloranddensity = vec4(inscattering*edensity,edensity);
	//ComputeScattering(dot(raydir,-sun_dir));
	
	//const float density = 1.0;
	vec3 outcolor = inscattering;
	int id = int(gl_GlobalInvocationID.x)*20*12 + int(gl_GlobalInvocationID.y)*12 +int(gl_GlobalInvocationID.z);
	//vec3 outcolor = randColor(int(id));
	//float heightdensity = max(density*(worldpos.y),0.0);
	//float extinction = exp(-heightdensity);
	
	imageStore(VolumeTexture,ivec3(fragcoords),coloranddensity);//vec4(inscattering,density));
}