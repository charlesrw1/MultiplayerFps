#version 430 core

out vec4 FS_OUT_Color;

in vec3 FS_IN_FragPos;
in vec3 FS_IN_Normal;
in vec2 FS_IN_Texcoord;
in vec3 FS_IN_BoneColor;
in vec4 FS_IN_NDC;

uniform vec3 view_pos;
uniform vec3 view_front;

uniform sampler2D basecolor;
uniform sampler2D auxcolor;

uniform float in_roughness;
uniform float in_metalness;


uniform samplerCube PBR_irradiance;
uniform samplerCube PBR_prefiltered_specular;
uniform sampler2D PBR_brdflut;

uniform sampler3D volumetric_fog;
uniform float znear;
uniform float zfar;

struct Vfog_Params
{
	ivec4 volumesize;
	vec4 spread_frustumend;
};
layout (binding = 4, std140) uniform Vfog_Param_Buffer {
	Vfog_Params fogparam;
};

float linearize_depth(float d,float zNear,float zFar)
{
    float z_n = 2.0 * d - 1.0;
    return 2.0 * zNear * zFar / (zFar + zNear - z_n * (zFar - zNear));
}

vec3 apply_volumetric_fog(vec3 incolor, vec3 NDC)
{
	// have xz of screen coords and z
	float z = linearize_depth(NDC.z,znear,zfar);
	vec2 screencoords = vec2(NDC.xy)*0.5 + vec2(0.5);
	vec3 coords = vec3(screencoords, z/100.0);
	coords.z = -coords.z;//-pow(coords.z, 1.0/fogparam.spread_frustumend.x);
	vec4 fog = texture(volumetric_fog, coords);	// clamps to edge for coords.z>1

	return incolor; fog.rgb;
}


#ifdef VERTEX_COLOR
in vec4 FS_IN_Color;
#endif

#ifdef LIGHTMAPPED
in vec2 FS_IN_TexCoord2;
uniform sampler2D lightmap;
#endif

#define AOPROXY
#ifdef AOPROXY
uniform vec4 aoproxy_sphere;
uniform float aoproxy_scale_factor;
float eliOcclusion( in vec3 pos, in vec3 nor, in vec4 sph )
{
    vec3  r = (sph.xyz - pos)/sph.w;
    float l = length(r);
	if(l < 1.0) l = 1.0;
    return dot(nor,r)/(l*l*l);
}

// from https://www.shadertoy.com/view/4djSDy
float sphOcclusion( in vec3 pos, in vec3 nor, in vec4 sph )
{
    vec3  di = sph.xyz - pos;
    float l  = length(di);
    float nl = dot(nor,di/l);
    float h  = l/sph.w;
    float h2 = h*h;
    float k2 = 1.0 - h2*nl*nl;
    
    if(l<sph.w) return 1.0;
    //else return 1.0;
    // above/below horizon
    // EXACT: Quilez - https://iquilezles.org/articles/sphereao
    float res = max(0.0,nl)/h2;
    
    // intersecting horizon 
    if( k2 > 0.1 ) 
    {
        #if 1
            // EXACT : Lagarde/de Rousiers - https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
            res = nl*acos(-nl*sqrt( (h2-1.0)/(1.0-nl*nl) )) - sqrt(k2*(h2-1.0));
            res = res/h2 + atan( sqrt(k2/(h2-1.0)));
            res /= 3.141593;
        #else
            // APPROXIMATED : Quilez - https://iquilezles.org/articles/sphereao
            res = (nl*h+1.0)/h2;
            res = 0.33*res*res;
        #endif
    }
	res = pow(res,aoproxy_scale_factor);

    return res;
}


#endif

vec3 FresnelSchlickRougness(float cosTheta, vec3 F0, float roughness)
{
	 return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}

vec3 decode_normal(vec2 e)
{
	vec3 n=vec3(e,1.0-abs(e.x)-abs(e.y));
	if(n.z<0.0)
		n.xy=(1.0-abs(n.yx))*(step(0.0,n.xy)*2.0-vec2(1.0));
    n = normalize( n );
    return n;
}

void main()
{

	vec4 tex = texture(basecolor, FS_IN_Texcoord);
	tex.rgb = pow(tex.rgb,vec3(2.2));
#ifdef ALPHATEST
	if(tex.a < 0.5)
		discard;
#endif


	vec3 N = normalize(FS_IN_Normal);
	float Roughness = in_roughness;
	vec3 Albedo = tex.rgb;
	float Metalness = in_metalness;
	
// Lighting
	vec3 V = normalize(view_pos-FS_IN_FragPos);
	
	vec3 R = reflect(-V,N);
	const float MAX_REFLECTION_LOD = 4.0;
	vec3 prefiltered_color = textureLod(PBR_prefiltered_specular,R,Roughness*MAX_REFLECTION_LOD).rgb;
	//prefiltered_color = pow(prefiltered_color,vec3(2.2));
	
	vec3 F0 = vec3(0.04);
	F0 = mix(F0,Albedo,Metalness);

	vec3 F = FresnelSchlickRougness(max(dot(N,V),0.0),F0,Roughness);
	vec2 env_brdf = texture(PBR_brdflut,vec2(max(dot(N,V),0.0),Roughness)).rg;
	vec3 specular = prefiltered_color*(F*env_brdf.x+env_brdf.y);
	float ao = 1.0;
	
	
	vec3 irradiance = texture(PBR_irradiance,N).rgb;
	irradiance = textureLod(PBR_prefiltered_specular,N,4.0).rgb;
	//irradiance = pow(irradiance, vec3(2.2));
#ifdef LIGHTMAPPED
	irradiance = texture(lightmap, FS_IN_TexCoord2).rgb;
#endif
	vec3 diffuse = irradiance*Albedo;

	float dist = length(view_pos-FS_IN_FragPos);
	
	vec3 kS = F;
	vec3 kD = (1.0-kS)*(1.0-Metalness);
	
	vec3 ambient =(kD*diffuse+ specular)*ao;
	
	vec3 NDC = FS_IN_NDC.xyz/FS_IN_NDC.w;
	vec3 out_color = ambient;
	out_color = apply_volumetric_fog(ambient,NDC);
	
	#ifdef ANIMATED
	out_color += vec3(1,10,1);
	#endif

	
	//out_color = pow(out_color,vec3(1/2.2));
	

	FS_OUT_Color = vec4(out_color ,1.0);//vec4(pow(diffuse+ambient,vec3(1/2.2)),1);//abs(Albedo-((N+vec3(1))*0.5)),1.0);	
}	