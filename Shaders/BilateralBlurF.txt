

uniform sampler2D input_img;
uniform sampler2D scene_depth;

uniform vec2 InvFullRes = 1.0 / vec2(1024.0, 768.0);
uniform vec2 LinMAD;
uniform float zNear;

#define KERNEL_RADIUS 1.0

out float FS_OUT_Color;

in vec2 FS_IN_TexCoord;


float ViewSpaceZFromDepth(float d)
{
	// [0,1] -> [-1,1] clip space
	//d = d * 2.0 - 1.0;
	// 7/30: depth buffer change
	// Get view space Z
	return zNear/d;//-1.0 / (LinMAD.x * d + LinMAD.y);
}


vec2 SampleAOZ(vec2 uv)
{
	vec2 outaoz = vec2(0.0);
	vec2 ruv = FS_IN_TexCoord+uv*InvFullRes;
	outaoz.x = texture(input_img, ruv).r;
	outaoz.y = ViewSpaceZFromDepth(texture(scene_depth, ruv).r);

    return outaoz;
}


float CrossBilateralWeight(float r, float z, float z0)
{
	const float BlurSigma = (KERNEL_RADIUS+1.0f) * 0.5f;
	const float BlurFalloff = 1.0f / (2.0f*BlurSigma*BlurSigma);

	float dz = z0 - z;
	return exp2(-r*r*BlurFalloff - dz*dz);
}

void main(void)
{
	vec2 aoz = SampleAOZ(vec2(0));
	float center_z = aoz.y;

	float w = 1.0;
	float total_ao = aoz.x * w;
	float total_weight = w;
	float i = 1.0;

	for(; i <= KERNEL_RADIUS/2; i += 1.0)
	{
	#ifdef YBLUR
		aoz = SampleAOZ( vec2(0,i) );
	#else
		aoz = SampleAOZ( vec2(i,0) );
	#endif
		w = CrossBilateralWeight(i, aoz.y, center_z);
		total_ao += aoz.x * w;
		total_weight += w;
	#ifdef YBLUR
		aoz = SampleAOZ( vec2(0,-i) ); 
	#else
		aoz = SampleAOZ( vec2(-i,0) );
	#endif
		w = CrossBilateralWeight(i, aoz.y, center_z);
		total_ao += aoz.x * w;
		total_weight += w;
	}

	for(; i <= KERNEL_RADIUS; i += 2.0)
	{
	#ifdef YBLUR
		aoz = SampleAOZ( vec2(0,0.5+i) );
	#else
		aoz = SampleAOZ( vec2(0.5+i,0) );
	#endif
		w = CrossBilateralWeight(i, aoz.y, center_z);
		total_ao += aoz.x * w;
		total_weight += w;
	#ifdef YBLUR
		aoz = SampleAOZ( vec2(0,-0.5-i) );
	#else
		aoz = SampleAOZ( vec2(-0.5-i,0) );
	#endif
		w = CrossBilateralWeight(i, aoz.y, center_z);
		total_ao += aoz.x * w;
		total_weight += w;
	}

	float ao = total_ao / total_weight;
	FS_OUT_Color = aoz.x;
}