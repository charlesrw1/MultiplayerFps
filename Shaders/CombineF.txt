
out vec3 FS_OUT_Color;
in vec2 texCoord;

layout(binding = 0) uniform sampler2D scene_lit;
layout(binding = 1) uniform sampler2D bloom;
layout(binding = 2) uniform sampler2D lens_dirt;
layout(binding = 3) uniform sampler2D last_scene_lit;	// for TAA

float luminance(vec3 v)
{
    return dot(v, vec3(0.2126f, 0.7152f, 0.0722f));
}

vec3 change_luminance(vec3 c_in, float l_out)
{
    float l_in = luminance(c_in);
    return c_in * (l_out / l_in);
}

vec3 reinhard_extended_luminance(vec3 v, float max_white_l)
{
    float l_old = luminance(v);
    float numerator = l_old * (1.0f + (l_old / (max_white_l * max_white_l)));
    float l_new = numerator / (1.0f + l_old);
    return change_luminance(v, l_new);
}

vec3 contrast(vec3 v, vec3 amt)
{
	return max((v - vec3(0.5))*amt + vec3(0.5), vec3(0.0));
}

vec3 aces_approx(vec3 v)
{
    float a = 2.51f;
    float b = 0.03f;
    float c = 2.43f;
    float d = 0.59f;
    float e = 0.14f;
    return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);
}

vec3 uncharted2_tonemap_partial(vec3 x)
{
    float A = 0.15f;
    float B = 0.50f;
    float C = 0.10f;
    float D = 0.20f;
    float E = 0.02f;
    float F = 0.30f;
    return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;
}

vec3 uncharted2_filmic(vec3 v)
{
    float exposure_bias = 2.0f;
    vec3 curr = uncharted2_tonemap_partial(v * exposure_bias);

    vec3 W = vec3(4.0);
    vec3 white_scale = vec3(1.0f) / uncharted2_tonemap_partial(W);
    return curr * white_scale;
}

mat3 ACESInputMat =
mat3(
    0.59719, 0.35458, 0.04823,
    0.07600, 0.90834, 0.01566,
    0.02840, 0.13383, 0.83777
);

// ODT_SAT => XYZ => D60_2_D65 => sRGB
mat3 ACESOutputMat =
mat3(
     1.60475, -0.53108, -0.07367,
    -0.10208,  1.10813, -0.00605,
    -0.00327, -0.07276,  1.07602
);

vec3 RRTAndODTFit(vec3 v)
{
    vec3 a = v * (v + 0.0245786f) - 0.000090537f;
    vec3 b = v * (0.983729f * v + 0.4329510f) + 0.238081f;
    return a / b;
}

vec3 ACESFitted(vec3 color)
{
    color = transpose(ACESInputMat) * color;

    // Apply RRT and ODT
    color = RRTAndODTFit(color);

    color = transpose(ACESOutputMat) * color;

    // Clamp to [0, 1]
	//color = clamp(color, vec3(0.0),vec3(1.0));

    return color;
}

vec3 saturation_color_grade(vec3 color, float saturate_amt) {
	float luminance = luminance(color);
	return (color - luminance) * saturate_amt + luminance;
}

vec3 color_filter(vec3 color, vec3 filter_color) {
	return color * filter_color;
}

vec3 color_contrast (vec3 color, float amt) {
	const float ACEScc_MIDGRAY =   0.4135884;
	return (color - ACEScc_MIDGRAY) * amt + ACEScc_MIDGRAY;
}


void main()
{
	vec3 scene = texture(scene_lit, texCoord).rgb;
	vec3 bloom_add = texture(bloom, texCoord).rgb;
	vec3 dirt = texture(lens_dirt, texCoord).rgb;
	
	vec3 both = mix(scene,bloom_add+scene,0.05);
	
	//both = reinhard_extended_luminance(both, 1.0);
	both = aces_approx(both*0.7);
	//both = uncharted2_filmic(both);
	vec3 srgb = pow(both,vec3(1/2.2));
	//srgb = color_contrast(srgb, 0.95);
	//srgb = color_filter(srgb, vec3(1.0,0.92,0.8));
	srgb = saturation_color_grade(srgb, 1.1);
	
	
	//srgb = contrast(srgb, vec3(1.1));
	
	FS_OUT_Color = srgb;
}