#version 430 core

out vec4 FS_OUT_Color;

in vec3 FS_IN_FragPos;
in vec3 FS_IN_Normal;
in vec2 FS_IN_Texcoord;
in vec3 FS_IN_BoneColor;

uniform vec3 view_pos;
uniform vec3 view_front;

uniform sampler2D basecolor;
uniform sampler2D auxcolor;

#ifdef BLEND2
uniform sampler2D basecolor2;
uniform sampler2D auxcolor2;
uniform sampler2D special;
#endif

uniform float fog_start;
uniform float fog_end;
uniform vec3 fog_color;
uniform float fog_max_density;
uniform float near;
uniform float far;

uniform vec3 light_dir;

float linearize_depth(float d,float zNear,float zFar)
{
    float z_n = 2.0 * d - 1.0;
    return 2.0 * zNear * zFar / (zFar + zNear - z_n * (zFar - zNear));
}

vec3 apply_simple_fog(vec3 input_color, float ndc_z)
{
	float dist = linearize_depth(ndc_z,near,far);
	float density = ((dist-fog_start)/(fog_end-fog_start))*fog_max_density;
	density = clamp(density,0.0,1.0);
	return mix(input_color,fog_color,density);
}

#ifdef VERTEX_COLOR
in vec4 FS_IN_Color;
#endif

#ifdef LIGHTMAPPED
in vec2 FS_IN_TexCoord2;
uniform sampler2D lightmap;
#endif

void main()
{
	vec4 tex = texture(basecolor, FS_IN_Texcoord);
	tex = pow(tex,vec4(2.2));
#ifdef ALPHATEST
	if(tex.a < 0.5)
		discard;
#endif

#ifdef BLEND2
	vec4 tex2 = texture(basecolor2, FS_IN_Texcoord);
	tex2 = pow(tex2,vec4(2.2));
	vec2 blend = texture(special, FS_IN_Texcoord).rg;
	blend.g = 0.1;
	float a = FS_IN_Color.r;
	
	a = smoothstep(max(0,blend.r-blend.g), min(1,blend.r+blend.g), a);
	tex = mix(tex,tex2,a);
#endif
	
// regular models
	vec3 c = tex.rgb*(vec3(0.55)+max(dot(FS_IN_Normal, -light_dir), 0.0)*vec3(1.5));
	c = apply_simple_fog(c, gl_FragCoord.z);
#ifdef LIGHTMAPPED
	vec3 lm = texture(lightmap, FS_IN_TexCoord2).rgb;
	vec3 color = lm*tex.rgb;
	color = color/(vec3(1)+color);
	color = pow(color, vec3(1.0/2.2));
	FS_OUT_Color = vec4(color,1.0);
#else
	c = pow(c,vec3(1.0/2.2));
	FS_OUT_Color = vec4(c,1.0);
#endif


#ifdef BLEND2
	//FS_OUT_Color = vec4(FS_IN_Color.rgb,1.0);
#endif
}
	
