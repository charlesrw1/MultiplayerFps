

layout(location = 0) out vec4 FS_OUT_Color;

#include "SharedGpuTypes.txt"
#include "LightingShared.txt"

layout(binding = 0) uniform sampler2D GBUFFER0;		// ws normal (xyz)
layout(binding = 1) uniform sampler2D GBUFFER1;		// albedo, ao
layout(binding = 2) uniform sampler2D GBUFFER2;		// metallic,roughness, custom, matid, custom, matid
layout(binding = 3) uniform sampler2D DEPTH;		// depth texture (writes disabled)

#ifdef CHEAP_PCF
layout(binding = 4) uniform sampler2DArray cascade_shadow_map;
#else
layout(binding = 4) uniform sampler2DArrayShadow cascade_shadow_map;
#endif

layout (std140, binding = 8) uniform LightSpaceMatrices
{
    mat4 Mat[4];
	vec4 NearPlanes;
	vec4 FarPlanes;
}CascadeMats;

layout (binding = 0, std140) uniform Ubo_View_Constant_Buffer {
	Ubo_View_Constants_Struct g;
};

// sun variables
uniform vec3 uSunDirection;
uniform vec3 uSunColor=vec3(30.0);
uniform float uEpsilon = 0.005;

float linearize_depth(float d,float zNear,float zFar)
{
    float z_n = 2.0 * d - 1.0;
    return 2.0 * zNear * zFar / (zFar + zNear - z_n * (zFar - zNear));
}

vec3 WorldPosFromDepth(vec2 TexCoord, float depth) {

	// 7/30: reverse Z change
    float z = depth;// * 2.0 - 1.0;

    vec4 clipSpacePosition = vec4(TexCoord * 2.0 - 1.0, z, 1.0);
    vec4 viewSpacePosition = g.inv_viewproj * clipSpacePosition;

    // Perspective division
    viewSpacePosition /= viewSpacePosition.w;

    return viewSpacePosition.xyz;
}

#define PI 3.1415927
// ----------------------------------------------------------------------------
float DistributionGGX(vec3 N, vec3 H, float roughness)
{
    float a = roughness*roughness;
    float a2 = a*a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;

    float nom   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return nom / max(denom,0.0000001);
}
// ----------------------------------------------------------------------------
float GeometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;

    float nom   = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return nom / denom;
}
// ----------------------------------------------------------------------------
float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2 = GeometrySchlickGGX(NdotV, roughness);
    float ggx1 = GeometrySchlickGGX(NdotL, roughness);

    return ggx1 * ggx2;
}
// ----------------------------------------------------------------------------
vec3 fresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}
vec3 FresnelSchlickRougness(float cosTheta, vec3 F0, float roughness)
{
	 return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}

vec3 pbr_calculate(vec3 LightColor, vec3 LighDir, vec3 worldspace, vec3 Albedo, float Roughness, float Metalness, vec3 Normal)
{
	vec3 view_pos = g.viewpos_time.xyz;
	vec3 view_front = g.viewfront.xyz;

	vec3 V = normalize(view_pos-worldspace);
	
	vec3 R = reflect(-V,Normal);
	vec3 F0 = vec3(0.04);
	F0 = mix(F0,Albedo,Metalness);

	vec3 Lo = vec3(0.0);
    vec3 H = normalize(V + LighDir);
    vec3 radiance = LightColor;

        // Cook-Torrance BRDF
        float NDF = DistributionGGX(Normal, H, Roughness);   
        float G   = GeometrySmith(Normal, V, LighDir, Roughness);    
        vec3 F    = fresnelSchlick(max(dot(H, V), 0.0), F0);        
        
        vec3 numerator    = NDF * G * F;
        float denominator = 4.0 * max(dot(Normal, V), 0.0) * max(dot(Normal, LighDir), 0.0) + 0.0001; // + 0.0001 to prevent divide by zero
        vec3 specular = numerator / 1.0;
        vec3 kS = F;
        vec3 kD = vec3(1.0) - kS;
        kD *= 1.0 - Metalness;	                
          
		float NdotL = max(dot(Normal, LighDir), 0.0);        

		// add to outgoing radiance Lo
		Lo += (kD * Albedo / PI + specular) * radiance * NdotL;
	
	return Lo;
}



float sample_sun_shadow(vec3 WorldSpace
#ifdef DEBUG
,out int OUTlayer
#endif
)
{
#ifdef DEBUG
	OUTlayer = -1;
#endif

	int layer = -1;
	
	for(int i=0;i<4;i++) {
	// This adds some instructions but it looks so much better than just checking the plane distance since cascades overlap
		vec4 frag_pos_light_space = CascadeMats.Mat[i]*vec4(WorldSpace,1.0);
		vec3 proj_coords=frag_pos_light_space.xyz/frag_pos_light_space.w;
		if(proj_coords.x>-0.99&&proj_coords.x<0.99&&proj_coords.y>-0.99&&proj_coords.y<0.99 
		&& proj_coords.z > 0.001 && proj_coords.z < 0.99 // 7/30: reverse z change
		
		) {
			layer=i;
			break;
		}
	}
	if(layer==-1)
		return 1.0;

	vec4 frag_pos_light_space = CascadeMats.Mat[layer]*vec4(WorldSpace,1.0);
	vec3 proj_coords=frag_pos_light_space.xyz/frag_pos_light_space.w;
	proj_coords.xy=proj_coords.xy*0.5+0.5;	//7/30: reverse z change
	float depth_light_space=proj_coords.z;
	if(depth_light_space>1.05)
		return 1.0;
	
#ifdef DEBUG
	OUTlayer = layer;
#endif	
	float bias = uEpsilon;
	
	float shadow = 0.0;
	vec2 texelSize = 1.0 / vec2(textureSize(cascade_shadow_map, 0));
	vec2 grad = fract(proj_coords.xy/texelSize);
	for(int x = -1; x <= 1; ++x)
	{
		for(int y = -1; y <=1; ++y)
		{
			#ifdef CHEAP_PCF
		
				float pcf_depth = texture(
							cascade_shadow_map,
							vec3(proj_coords.xy + vec2(x, y) * texelSize,
							layer)
							).r; 
				shadow += (depth_light_space - bias) > pcf_depth ? 1.0 : 0.0;
			#else	// Bilinear filtered, looks nice
					shadow += texture(cascade_shadow_map,vec4(proj_coords.xy + vec2(x, y) * texelSize,
							layer,(depth_light_space-bias)));
			#endif
		}    
	}
	shadow /= 9.0;

	return 1.0-shadow;
}

void main()
{
	vec2 uv = vec2(gl_FragCoord.xy) / vec2(g.viewport_size.xy);
	vec4 metal_rough = texture(GBUFFER2,uv);
	vec4 albedo = texture(GBUFFER1,uv);
	vec4 depth_tex = texture(DEPTH,uv);
	vec4 normal_t = texture(GBUFFER0,uv);
	
	uint type = get_gbuffer_material_type(metal_rough);
	if(type==MATERIAL_TYPE_UNLIT)
		discard;
	
	float depth_value = depth_tex.r;
	vec3 worldspace = WorldPosFromDepth(uv, depth_value);
	
	#ifdef DEBUG
		int layer = 0;
		float shadow_factor = sample_sun_shadow(worldspace,layer);
		if(layer==0)
			FS_OUT_Color = vec4(1,0,0,1);
		else if(layer==1)
			FS_OUT_Color = vec4(0,1,0,1);
		else if(layer==2)
			FS_OUT_Color = vec4(0,0,1,1);
		else if(layer==3)
			FS_OUT_Color = vec4(1,1,0,1);
		else if(layer == -1)
			FS_OUT_Color = vec4(0,0,0,1);
		
			
		//FS_OUT_Color = vec4(shadow_factor);
	#else
		float shadow_factor = sample_sun_shadow(worldspace);
		vec3 out_color = pbr_calculate(uSunColor, -uSunDirection, worldspace, albedo.xyz, metal_rough.y, metal_rough.x, normal_t.xyz);
		FS_OUT_Color = vec4(shadow_factor*out_color,1.0);
	#endif
}