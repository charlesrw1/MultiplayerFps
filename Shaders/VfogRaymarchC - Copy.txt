#version 430 core

// from implmentation in godot engine

layout(local_size_x = 8, local_size_y=8,local_size_z=1) in;
layout(rgba16f,binding =2) uniform image3D  VolumeTexture;

#define MAXDEPTH 64

vec4 AccumulateScattering(vec4 curslice,vec4 nextslice, float deltaz)
{
	vec3 light = curslice.rgb+exp(-curslice.a)*nextslice.rgb;
	return vec4(light,curslice.a+nextslice.a*deltaz);
	//return vec4(curslice+nextslice);
}
void WriteOutput(ivec3 pos, vec4 colordensity)
{
	vec4 finalval = vec4(colordensity.rgb,exp(-colordensity.a));
	imageStore(VolumeTexture,pos,finalval);
}

struct Vfog_Params
{
	ivec4 volumesize;
	vec4 spread_frustumend;
};
layout (binding = 4, std140) uniform Vfog_Param_Buffer {
	Vfog_Params fogparam;
};

uniform float znear;
uniform float zfar;




float GetPlaneDist(uint z)
{
	return znear*pow(zfar/znear,float(z)/128.0);
}


vec4 accumulate(vec4 last, vec4 next, float deltaz)
{
	vec3 light = last.rgb+clamp(exp(-last.a),0.0,1.0)*next.rgb;
	return vec4(light, last.a + next.a);
}

float get_depth_at_pos(float cell_depth, int z)
{
	float d = float(z)*cell_depth + cell_depth*0.5;	// d: [0,1]
	d = pow(d, fogparam.spread_frustumend.x);
	return d*fogparam.spread_frustumend.y;
}

void main()
{
	uvec3 OutputCoords = gl_GlobalInvocationID.xyz;
	vec4 fog_accum=vec4(0.0,0.0,0.0,1.0);
	vec3 fog_cell_size = 1.0/vec3(fogparam.volumesize);
	float prev_z = 0.0;
	vec4 current_slice = imageLoad(VolumeTexture,ivec3(OutputCoords.xy,0));
	for(int z=1;z<128;z++)
	{
		vec4 next_slice = imageLoad(VolumeTexture,ivec3(OutputCoords.xy,z));
		current_slice = accumulate(current_slice,next_slice,1.0);
		
		//vec4 fog = imageLoad(VolumeTexture,ivec3(OutputCoords.xy,z));
		
		//float zdepth = get_depth_at_pos(fog_cell_size.z, z);
		//float deltaz = abs(prev_z-zdepth);
		//float transmittance = exp(-deltaz*fog.a);
		//fog_accum.rgb += (fog.rgb-fog.rgb*transmittance)/max(fog.a,0.00001) *fog_accum.a;
		//fog_accum.a *= transmittance;
		//prev_z = zdepth;
		//imageStore(VolumeTexture, ivec3(OutputCoords.xy,z), vec4(fog_accum.rgb, 1.0-fog_accum.a));
		imageStore(VolumeTexture, ivec3(OutputCoords.xy,z), vec4(current_slice.rgb, exp(-current_slice.a)));
	}
}