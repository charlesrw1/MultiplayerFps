#version 460 core
layout (location = 0) in vec3 VS_IN_Postion;
layout (location = 1) in vec2 VS_IN_TexCoord;
layout (location = 2) in vec3 VS_IN_Normal;


out vec3 FS_IN_FragPos;
out vec3 FS_IN_Normal;
out vec2 FS_IN_Texcoord;
out vec3 FS_IN_ColorHash;
out vec4 FS_IN_NDC;
flat out uint FS_IN_DrawID;

vec3 randColor(int number){
    return fract(sin(vec3(number+1)*vec3(12.8787, 1.97, 20.73739)));
}

struct Ubo_View_Constants_Struct
{
	mat4 view;
	mat4 viewproj;
	mat4 invview;
	mat4 invproj;
	vec4 viewpos_time;
	vec4 viewfront;
	vec4 viewport_size;

	float near;
	float far;
	float shadowmap_epsilon;
	float padding1;
	
	vec4 fogcolor;
	vec4 fogparams;
	vec4 directional_light_dir_and_used;
	vec4 directional_light_color;
	
	float numcubemaps;
	float numlights;
	float forcecubemap;
	float padding2;
	
	vec4 custom_clip_plane;
};

layout (binding = 0, std140) uniform Ubo_View_Constant_Buffer {
	Ubo_View_Constants_Struct g;
};
#ifdef NAIVE
uniform mat4 model;
uniform int integer;
#else

layout (binding = 2, std140) readonly buffer matricies_obj {
	mat4 matricies[];
};

#endif



void main()
{
#ifdef NAIVE
	FS_IN_DrawID = integer % 4;

	FS_IN_ColorHash = randColor(integer);
	vec4 local_pos = model*vec4(VS_IN_Postion,1.0);
	vec3 local_normal = VS_IN_Normal;
	FS_IN_FragPos = local_pos.xyz;
	FS_IN_Normal = local_normal;
    FS_IN_NDC = g.viewproj * vec4(FS_IN_FragPos, 1.0);
	gl_Position = FS_IN_NDC;
	FS_IN_Texcoord = VS_IN_TexCoord;
#else
	FS_IN_DrawID = gl_DrawID;

	FS_IN_ColorHash = randColor(gl_InstanceID);
	vec4 local_pos = matricies[gl_BaseInstance + gl_InstanceID]*vec4(VS_IN_Postion,1.0);
	vec3 local_normal = VS_IN_Normal;
	FS_IN_FragPos = local_pos.xyz;
	FS_IN_Normal = local_normal;
    FS_IN_NDC = g.viewproj * vec4(FS_IN_FragPos, 1.0);
	gl_Position = FS_IN_NDC;
	FS_IN_Texcoord = VS_IN_TexCoord;
#endif
}