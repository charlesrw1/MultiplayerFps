
out vec4 FS_OUT_Color;

in vec4 FS_IN_Color;
in vec2 FS_IN_TexCoord;


#ifdef TEXTURE_2D_VERSION
layout(binding = 0) uniform sampler2D the_texture;
#endif
#ifdef TEXTURE_2D_ARRAY_VERSION
layout(binding = 0) uniform sampler2DArray the_texture;
#endif

uniform float near = 0.01; 
uniform float far  = 100.0; 
uniform float alpha = 1.0;
uniform float mip_slice = 0.0;
uniform bool linearize_depth = false;
uniform bool fetch_texel = false;
uniform int texture_width = 100;
uniform int texture_height = 100;
  
float LinearizeDepth(float depth) 
{
    float z = depth * 2.0 - 1.0; // back to NDC 
    return (2.0 * near * far) / (far + near - z * (far - near));	
}

void main()
{
	vec4 tex_color = vec4(0.0);
	
#ifdef TEXTURE_2D_VERSION
	if(mip_slice < 0) {
		tex_color = texture(the_texture, FS_IN_TexCoord);
	}
	else {
		if(fetch_texel) {
			ivec2 coords = ivec2(FS_IN_TexCoord.x * texture_width, FS_IN_TexCoord.y * texture_height);
			tex_color = texelFetch(the_texture, coords, int(mip_slice));
		}
		else {
			tex_color = textureLod(the_texture, FS_IN_TexCoord, mip_slice);
		}
	}
#endif

#ifdef TEXTURE_2D_ARRAY_VERSION
	tex_color = texture(the_texture, vec3(FS_IN_TexCoord,0.0));
#endif

FS_OUT_Color = vec4(tex_color.rgb, alpha);
}
	
