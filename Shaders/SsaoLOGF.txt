
out float FragColor;

in vec2 FS_IN_TexCoord;

uniform sampler2D scene_depth;
uniform sampler2D noise_texture;

uniform vec3 samples[64];

// parameters (you'd probably want to use them as uniforms to more easily tweak the effect)
int kernelSize = 16;
float radius = 0.51;
float bias = 0.01;

// tile noise texture over screen based on screen dimensions divided by noise size
uniform vec2 NoiseScale;// = vec2(800.0/4.0, 600.0/2.0); 

uniform mat4 projection;
uniform mat4 invprojection;
uniform vec2 InvAORes;
uniform vec2 AORes;

vec3 UVToViewSpace(vec2 uv, float z)
{
	vec4 viewspace = invprojection*vec4(uv*2.0-vec2(1.0),z*2.0-1.0,1.0);
	
	return viewspace.xyz/viewspace.w;//vec3(uv * z, z);
}

vec3 GetViewPos(vec2 uv)
{
	float z = texture(scene_depth, uv).r;
	return vec3(UVToViewSpace(uv, z).xyz);//,z);
}


vec3 MinDiff(vec3 P, vec3 Pr, vec3 Pl)
{
    vec3 V1 = Pr - P;
    vec3 V2 = P - Pl;
    return (dot(V1,V1) < dot(V2,V2)) ? V1 : V2;
}

void main()
{
    // get input for SSAO algorithm
    //vec3 fragPos = texture(scene_depth, FS_IN_TexCoord).xyz;
    //vec3 normal = normalize(texture(scene_normals, FS_IN_TexCoord).rgb);
	
	
	vec3 fragPos = GetViewPos(FS_IN_TexCoord);
	
	// to support viewmodel ambient occlusion better
	radius = mix(0.12, 0.5, smoothstep(-0.6,-1.2, fragPos.z));

	
    vec3 Pr 	= GetViewPos(FS_IN_TexCoord + vec2( InvAORes.x, 0));
    vec3 Pl 	= GetViewPos(FS_IN_TexCoord + vec2(-InvAORes.x, 0));
    vec3 Pt 	= GetViewPos(FS_IN_TexCoord + vec2( 0, InvAORes.y));
    vec3 Pb 	= GetViewPos(FS_IN_TexCoord + vec2( 0,-InvAORes.y));
    vec3 dPdu = MinDiff(fragPos, Pr, Pl);
    vec3 dPdv = MinDiff(fragPos, Pt, Pb);// * (AORes.y * InvAORes.x);
	vec3 normal = normalize(cross(dPdu, dPdv));
	
	
    vec3 randomVec = normalize(texture(noise_texture, FS_IN_TexCoord * NoiseScale).xyz);
    // create TBN change-of-basis matrix: from tangent-space to view-space
    vec3 tangent = normalize(randomVec - normal * dot(randomVec, normal));
    vec3 bitangent = cross(normal, tangent);
    mat3 TBN = mat3(tangent, bitangent, normal);
    // iterate over the sample kernel and calculate occlusion factor
    float occlusion = 0.0;
    for(int i = 0; i < kernelSize; ++i)
    {
        // get sample position
        vec3 samplePos = TBN * samples[i]; // from tangent to view-space
        samplePos = fragPos + samplePos * radius; 
        
        // project sample position (to sample texture) (to get position on screen/texture)
        vec4 offset = vec4(samplePos, 1.0);
        offset = projection * offset; // from view to clip-space
        offset.xyz /= offset.w; // perspective divide
        offset.xyz = offset.xyz * 0.5 + 0.5; // transform to range 0.0 - 1.0
        
        // get sample depth
        //*float sampleDepth = texture(scene_depth, offset.xy).z; // get depth value of kernel sample
        float sampleDepth = GetViewPos(offset.xy).z;
		
        // range check & accumulate
        float rangeCheck = smoothstep(0.0, 1.0, radius / abs(fragPos.z - sampleDepth));
        occlusion += (sampleDepth >= samplePos.z + bias ? 1.0 : 0.0) * rangeCheck;           
    }
    occlusion = 1.0 - (occlusion / kernelSize);
    
    FragColor = pow(occlusion,2.3);
}

