draw scene (color and depth) to scene fbo
make ssao texture
	-input (scene color and depth, noise texture)
	-output (color ssao texture)
combine scene color and ssao texture to make output color texture
	also add fog here

then use output color and original scene depth:
	draw transparents, sprites, debug graphics, ui, etc.

textures needed:
	scene_color
	scene_depth
	ssao_color
	output_color
	
	scene_fbo (sc, sd)
	ssao_fbo (ssaot)
	final_fbo (ot, sd)
	

Mat File:

mymaterial
	image: base.png
	normal: basen.png
	alpha: test



Eventual format:
	load trenchbroom maps, yes... just do it
	maybe make editor to place static objects more easily
	
	so: trenchbroom static meshes, can be split to multiple render models. These dont need individual bvh since they are batched
		trenchbroom dynamic meshes, multiple render models, multiple bvh for collision
		gltf static models, multiple models loaded by game. batched into static bvh
		dynamic gltf models, multiple models, dont need collision but can have it (can be the render mesh or custom collision mesh in blender)
		
		bottom line: treat trenchbroom meshes just like normal meshes so easier to intergrate.
		
		Now: first 64 models will be reserved for inline dynamic models like doors, platforms, etc.
		so MOD_PLAYER = 65, ...
		
		loader should do this:
			
			Model_Load(input: mesh, add_collision, output: appends to model)
			
			Load_Gltf_Mod()
				Model_Load(mesh, if collision_flag true, model)
			
			Level_Load()
				for each mesh
					Model_Load or TrenchbroomLoad() -> Model
				
				for each object
					Load_Object -> Map_Spawn
				
				for each renderable static mesh, 
					Build union of collision meshes -> BVH