(root

(mirror :exp $mirrored :lerp 0.1
	(additive
		(statemachine s_idle)
		(subtract
			(clip stand_rifle_aim_l)
			(clip stand_rifle_aim_c)
		)
		(quote 0.0)
	)
)


; find highest weighted piece and use it as the master track
; all other tracks sync to it


(def-state s_move 
	:duration 0.2
	:tree
		(boolean-blend
			; standing
			(move-directional-blend				
				:idle (clip stand_rifle_aim_idle)
				:walk (list
					(clip stand_rifle_run_s  :rootx del :rooty del )
					(clip stand_rifle_run_sw :rootx del :rooty del )
					(clip stand_rifle_run_w  :rootx del :rooty del )
					(clip stand_rifle_run_nw :rootx del :rooty del )
					(clip stand_rifle_run_n  :rootx del :rooty del )
					(clip stand_rifle_run_ne :rootx del :rooty del )
					(clip stand_rifle_run_e  :rootx del :rooty del )
					(clip stand_rifle_run_se :rootx del :rooty del )
				)
			)
			; crouching
				(move-directional-blend
				:idle (clip crouch_rifle_idle)
				:walk (list
					(clip crouch_rifle_walk_s  :rootx del :rooty del )
					(clip crouch_rifle_walk_sw :rootx del :rooty del )
					(clip crouch_rifle_walk_w  :rootx del :rooty del )
					(clip crouch_rifle_walk_nw :rootx del :rooty del )
					(clip crouch_rifle_walk_n  :rootx del :rooty del )
					(clip crouch_rifle_walk_ne :rootx del :rooty del )
					(clip crouch_rifle_walk_e  :rootx del :rooty del )
					(clip crouch_rifle_walk_se :rootx del :rooty del )
				)
			)
			
			; parameter
			$mirrored
		)
	:transitions ( list
		(transition s_jumpstart
			(quote $jumping)
		)
		
		(transition s_idle
			(quote (not $moving))
		)
	)
)

(def-state s_midair
	:tree
		(clip midair_fall)
	:transitions ( list
		(transition s_idle
			(quote (not $jumping))
		)
	)
)

(def-state s_jumpstart
	:tree
		(clip jump_to_air :rootz del :rate 2.3 :loop false)
		
	:transitions ( list
		(transition s_idle
			(quote (not $jumping))
		)
	)
	:transition-done s_midair
)

(def-state s_idle
	:tree
		(clip stand_rifle_aim_idle)
	:transitions ( list
		(transition s_jumpstart
			(quote $jumping)
		)
		(transition s_move 
			(quote $moving)
		)
	)
)

)